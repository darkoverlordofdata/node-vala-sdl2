#!/usr/bin/env node
const fs = require('fs')
const os = require('os')
const { execSync } = require('child_process')
/**
 * Install:
 *  copy files to prefix location and
 *  patch references to prefix locations
 *
 *   copy executable to ~/.local/bin
 *   copy resources to ~/.local/share/${appName}
 *   copy .desktop to ~/.local/share/applications
 * 
 */

const appName = 'game'
const exeFile = `${appName}`
const dskFile = `${appName}.desktop`
const icoFile = `${appName}/images/spaceshipspr.png`
const resFiles = [
    `fonts/OpenDyslexic-Bold.otf`,
    `images/spaceshipspr.png`,
    `lib/entitas.js`,
    `lib/sdx.js`,
    `entitas.js`,
    `index.js`,
    `modules.js`,
    `pack.atlas`,
    `pack.png`,
    `shim.js`
]


//
//  prefix = ~/.local
//
const prefix = `${os.homedir()}/.local`

//
//  Make sure the application folder(s) exists
//
if (!fs.existsSync(`${prefix}/share/${appName}`))
    fs.mkdirSync(`${prefix}/share/${appName}`)
if (!fs.existsSync(`${prefix}/share/${appName}/fonts`))
    fs.mkdirSync(`${prefix}/share/${appName}/fonts`)
if (!fs.existsSync(`${prefix}/share/${appName}/images`))
    fs.mkdirSync(`${prefix}/share/${appName}/images`)
if (!fs.existsSync(`${prefix}/share/${appName}/lib`))
    fs.mkdirSync(`${prefix}/share/${appName}/lib`)


//
//  patch the data prefix, add a shebang
//
let source = fs.readFileSync(`bin/${exeFile}`, {encoding: 'utf8'})
source = source.replace(/const DATADIR = \".*\"/g, `const DATADIR = \"${prefix}/share/${appName}\"`)
// fs.writeFileSync(`${prefix}/bin/${exeFile}`, `#!/usr/bin/env gjs\n`+source)
fs.writeFileSync(`${prefix}/bin/${exeFile}`, source)

//
//  set the executable bit
//
execSync(`chmod +x ${prefix}/bin/${exeFile}`)

//
//  patch the .desktop prefix
//
lines = fs.readFileSync(`share/applications/${dskFile}`, {encoding: 'utf8'}).split('\n')
let out = []
for (let line of lines) {
    let [key,value] = line.split('=')
    if (value != null) 
        switch (key) {
            case 'Exec': out.push(`Exec=${prefix}/bin/${exeFile}`); break
            case 'Icon': out.push(`Icon=${prefix}/share/${icoFile}`); break
            default: out.push(line)
        }
    else 
        out.push(line)
    
}
fs.writeFileSync(`${prefix}/share/applications/${dskFile}`, out.join('\n'))

//
//  set the executable bit
//
execSync(`chmod +x ${prefix}/share/applications/${dskFile}`)

//
// copy the icon 
//
execSync(`cp share/${icoFile} ${prefix}/share/${appName}`)

//
// just copy the resources 
//
for (let file of resFiles) {
    let fs = file.split('/')
    let name = fs.pop()
    let folder = fs.join('/')
    execSync(`cp share/${appName}/${file} ${prefix}/share/${appName}/${folder}`)
}

