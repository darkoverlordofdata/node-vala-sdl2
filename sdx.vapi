/* sdx.vapi generated by valac.exe 0.36.4-dirty, do not modify. */

namespace sdx {
	namespace audio {
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class Sound : GLib.Object {
			public SDLMixer.Chunk chunk;
			public Sound (sdx.files.FileHandle file);
			public void play (int loops = 0);
		}
	}
	namespace files {
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class FileHandle : GLib.Object {
			public FileHandle (string fileName, sdx.FileType type);
			public GLib.Bytes bytes ();
			public sdx.files.FileHandle child (string name);
			public bool exists ();
			public string getExt ();
			public string getName ();
			public sdx.files.FileHandle getParent ();
			public string getPath ();
			public SDL.RWops getRWops ();
			public sdx.FileType getType ();
			public GLib.InputStream read ();
			public GLib.File file { get; }
			public string path { get; }
		}
	}
	namespace graphics {
		namespace s2d {
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Batch {
				public Batch ();
				public void setColor (double r, double g, double b, double a);
				public GLib.GenericArray sprites { get; set; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class BitmapFont {
				public class BitmapFontData {
					public double ascent;
					public double blankLineScale;
					public char[] breakChars;
					public char[] capChars;
					public double capHeight;
					public double cursorX;
					public double descent;
					public double down;
					public bool flipped;
					public sdx.files.FileHandle fontFile;
					public sdx.graphics.s2d.BitmapFont.Glyph[,] glyphs;
					public string[] imagePaths;
					public double lineHeight;
					public bool markupEnabled;
					public sdx.graphics.s2d.BitmapFont.Glyph missingGlyph;
					public double padBottom;
					public double padLeft;
					public double padRight;
					public double padTop;
					public double scaleX;
					public double scaleY;
					public double spaceWidth;
					public char[] xChars;
					public double xHeight;
					public BitmapFontData (sdx.files.FileHandle? fontFile = null, bool flip = false);
					public sdx.graphics.s2d.BitmapFont.Glyph getFirstGlyph ();
					public sdx.graphics.s2d.BitmapFont.Glyph getGlyph (char ch);
					public void getGlyphs (sdx.graphics.s2d.GlyphLayout.GlyphRun run, string str, int start, int end, bool tightBounds);
					public string getImagePath (int index);
					public int getWrapIndex (int start, Gee.ArrayList<sdx.graphics.s2d.BitmapFont.Glyph> glyphs);
					public bool hasGlyph (char ch);
					public bool isBreakChar (char c);
					public bool isWhitespace (char c);
					public void load (sdx.files.FileHandle fontFile, bool flip);
					public void scale (double amount);
					public void setGlyph (int ch, sdx.graphics.s2d.BitmapFont.Glyph glyph);
					public void setGlyphRegion (sdx.graphics.s2d.BitmapFont.Glyph glyph, sdx.graphics.s2d.TextureRegion region);
					public void setLineHeight (double height);
					public void setScale (double scaleX, double scaleY);
				}
				public class Glyph {
					public bool fixedWidth;
					public int height;
					public int id;
					public char[,] kerning;
					public int page;
					public double u;
					public double u2;
					public double v;
					public double v2;
					public int width;
					public int x;
					public int xadvance;
					public int xoffset;
					public int y;
					public int yoffset;
					public Glyph ();
					public int getKerning (char ch);
					public void setKerning (int ch, int value);
				}
				public sdx.graphics.s2d.BitmapFont.BitmapFontData data;
				public Gee.ArrayList<sdx.graphics.s2d.TextureRegion> regions;
				public const int LOG2_PAGE_SIZE;
				public const int PAGES;
				public const int PAGE_SIZE;
				public BitmapFont ();
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Font : GLib.Object {
				public SDLTTF.Font innerFont;
				public Font (sdx.files.FileHandle file, int size);
				public SDL.Video.Surface render (string text, sdx.graphics.Color color);
				public string path { get; set; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class GlyphLayout : GLib.Object, sdx.utils.Poolable {
				public class GlyphRun : GLib.Object, sdx.utils.Poolable {
					public sdx.graphics.Color color;
					public Gee.ArrayList<sdx.graphics.s2d.BitmapFont.Glyph> glyphs;
					public double width;
					public double x;
					public Gee.ArrayList<double?> xAdvances;
					public double y;
					public GlyphRun ();
				}
				public Gee.ArrayList<sdx.graphics.Color> colorStack;
				public double height;
				public Gee.ArrayList<sdx.graphics.s2d.GlyphLayout.GlyphRun> runs;
				public double width;
				public GlyphLayout (sdx.graphics.s2d.BitmapFont? font = null, string str, sdx.graphics.Color? color = null, double targetWidth = 0, double halign = 0, bool wrap = false, string truncate = null);
				public int parseColorMarkup (string str, int start, int end, sdx.utils.Pool colorPool);
				public void setText (sdx.graphics.s2d.BitmapFont font, string str, int start, int end, sdx.graphics.Color? color = null, double targetWidth = 0, double halign = 0, bool wrap = false, string truncate = null);
				public void truncate (sdx.graphics.s2d.BitmapFont.BitmapFontData fontData, sdx.graphics.s2d.GlyphLayout.GlyphRun run, double targetWidth, string truncate, int widthIndex, sdx.utils.Pool glyphRunPool);
				public sdx.graphics.s2d.GlyphLayout.GlyphRun wrap (sdx.graphics.s2d.BitmapFont.BitmapFontData fontData, sdx.graphics.s2d.GlyphLayout.GlyphRun first, sdx.utils.Pool glyphRunPool, int wrapIndex, int widthIndex);
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class NinePatch : GLib.Object {
				public int bottomCenter;
				public double bottomHeight;
				public int bottomLeft;
				public int bottomRight;
				public sdx.graphics.Color color;
				public int idx;
				public double leftWidth;
				public int middleCenter;
				public double middleHeight;
				public int middleLeft;
				public int middleRight;
				public double middleWidth;
				public double padBottom;
				public double padLeft;
				public double padRight;
				public double padTop;
				public double rightWidth;
				public sdx.graphics.Texture texture;
				public int topCenter;
				public double topHeight;
				public int topLeft;
				public int topRight;
				public double[] vertices;
				public const int BOTTOM_CENTER;
				public const int BOTTOM_LEFT;
				public const int BOTTOM_RIGHT;
				public const int MIDDLE_CENTER;
				public const int MIDDLE_LEFT;
				public const int MIDDLE_RIGHT;
				public const int TOP_CENTER;
				public const int TOP_LEFT;
				public const int TOP_RIGHT;
				public NinePatch (sdx.graphics.s2d.TextureRegion region, int left, int right, int top, int bottom);
				public int add (sdx.graphics.s2d.TextureRegion region, double color, bool isStretchW, bool isStretchH);
				public void draw (sdx.graphics.s2d.Batch batch, double x, double y, double width, double height);
				public double getBottomHeight ();
				public sdx.graphics.Color getColor ();
				public double getLeftWidth ();
				public double getMiddleHeight ();
				public double getMiddleWidth ();
				public double getPadBottom ();
				public double getPadLeft ();
				public double getPadRight ();
				public double getPadTop ();
				public double getRightWidth ();
				public double getTopHeight ();
				public double getTotalHeight ();
				public double getTotalWidth ();
				public void load (sdx.graphics.s2d.TextureRegion[] patches);
				public NinePatch.ninepatch (sdx.graphics.s2d.NinePatch ninePatch, sdx.graphics.Color color = null);
				public void scale (double scaleX, double scaleY);
				public void setBottomHeight (double bottomHeight);
				public void setColor (sdx.graphics.Color color);
				public void setLeftWidth (double leftWidth);
				public void setMiddleHeight (double middleHeight);
				public void setMiddleWidth (double middleWidth);
				public void setPadBottom (double bottom);
				public void setPadLeft (double left);
				public void setPadRight (double right);
				public void setPadTop (double top);
				public void setPadding (double left, double right, double top, double bottom);
				public void setRightWidth (double rightWidth);
				public void setTopHeight (double topHeight);
				public NinePatch.textureXY (sdx.graphics.Texture texture, int left, int right, int top, int bottom);
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Sprite : GLib.Object {
				public int id;
				public string path;
				public sdx.graphics.s2d.Scale scale;
				public SDL.Video.Texture texture;
				public static int uniqueId;
				public Sprite (string path = "");
				public Sprite.file (sdx.files.FileHandle file);
				public Sprite.region (sdx.graphics.s2d.TextureAtlas.AtlasRegion region);
				public void render (SDL.Video.Renderer renderer, int x, int y, SDL.Video.Rect? clip = null);
				public void setColor (int r, int g, int b);
				public void setScale (double x, double y);
				public void setText (string text, sdx.graphics.s2d.Font font, sdx.graphics.Color color);
				public Sprite.text (string text, sdx.graphics.s2d.Font font, sdx.graphics.Color color);
				public int a { get; set; }
				public int b { get; set; }
				public bool centered { get; set; }
				public int g { get; set; }
				public int height { get; set; }
				public int layer { get; set; }
				public int r { get; set; }
				public int width { get; set; }
				public int x { get; set; }
				public int y { get; set; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class TextureAtlas : GLib.Object {
				public class AtlasRegion : sdx.graphics.s2d.TextureRegion {
					public AtlasRegion (sdx.graphics.Texture texture, int x, int y, int width, int height);
					public void flip (bool x, bool y);
					public int index { get; set; }
					public string name { get; set; }
					public int offsetX { get; set; }
					public int offsetY { get; set; }
					public int originalHeight { get; set; }
					public int originalWidth { get; set; }
					public int packedHeight { get; set; }
					public int packedWidth { get; set; }
					public int[] pads { get; set; }
					public bool rotate { get; set; }
					public int[] splits { get; set; }
				}
				public class TextureAtlasData : GLib.Object {
					public class Page {
						public Page (sdx.files.FileHandle handle, int width, int height, bool useMipMaps, sdx.graphics.s2d.Format format, int minFilter, int magFilter, int uWrap, int vWrap);
						public sdx.graphics.s2d.Format format { get; set; }
						public int height { get; set; }
						public int magFilter { get; set; }
						public int minFilter { get; set; }
						public sdx.graphics.Texture texture { get; set; }
						public sdx.files.FileHandle textureFile { get; set; }
						public int uWrap { get; set; }
						public bool useMipMaps { get; set; }
						public int vWrap { get; set; }
						public int width { get; set; }
					}
					public class Region {
						public Region (sdx.graphics.s2d.TextureAtlas.TextureAtlasData.Page page, int left, int top, int width, int height, string name, bool rotatate);
						public bool flip { get; set; }
						public int height { get; set; }
						public int index { get; set; }
						public int left { get; set; }
						public string name { get; set; }
						public int offsetX { get; set; }
						public int offsetY { get; set; }
						public int originalHeight { get; set; }
						public int originalWidth { get; set; }
						public int[] pads { get; set; }
						public sdx.graphics.s2d.TextureAtlas.TextureAtlasData.Page page { get; set; }
						public bool rotate { get; set; }
						public int[] splits { get; set; }
						public int top { get; set; }
						public int width { get; set; }
					}
					public TextureAtlasData (sdx.files.FileHandle packFile, sdx.files.FileHandle imagesDir, bool flip);
					public Gee.ArrayList<sdx.graphics.s2d.TextureAtlas.TextureAtlasData.Page> pages { get; set; }
					public Gee.ArrayList<sdx.graphics.s2d.TextureAtlas.TextureAtlasData.Region> regions { get; set; }
				}
				public TextureAtlas (sdx.graphics.s2d.TextureAtlas.TextureAtlasData? data = null);
				public sdx.graphics.s2d.Sprite? createSprite (string name, int index = -1);
				public TextureAtlas.file (sdx.files.FileHandle packFile, sdx.files.FileHandle? imageDir = null, bool flip = false);
				public sdx.graphics.s2d.TextureAtlas.AtlasRegion findRegion (string name, int index = -1);
				public void load (sdx.graphics.s2d.TextureAtlas.TextureAtlasData data);
				public static int readTuple (GLib.DataInputStream reader) throws sdx.IOException;
				public static string readValue (GLib.DataInputStream reader) throws sdx.IOException;
				public Gee.ArrayList<sdx.graphics.s2d.TextureAtlas.AtlasRegion> regions { get; }
				public Gee.HashSet<sdx.graphics.Texture> textures { get; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class TextureRegion : GLib.Object {
				public TextureRegion (sdx.graphics.Texture texture, int x = 0, int y = 0, int width = 0, int height = 0);
				public void flip (bool x, bool y);
				public int getRegionHeight ();
				public int getRegionWidth ();
				public int getRegionX ();
				public int getRegionY ();
				public double getU ();
				public double getU2 ();
				public double getV ();
				public double getV2 ();
				public bool isFlipX ();
				public bool isFlipY ();
				public TextureRegion.region (sdx.graphics.s2d.TextureRegion region, int x = 0, int y = 0, int width = 0, int height = 0);
				public void setByRegion (sdx.graphics.s2d.TextureRegion region);
				public void setByRegionXY (sdx.graphics.s2d.TextureRegion region, int x, int y, int width, int height);
				public void setRegion (double u, double v, double u2, double v2);
				public void setRegionHeight (int height);
				public void setRegionWidth (int width);
				public void setRegionX (int x);
				public void setRegionXY (int x, int y, int width, int height);
				public void setRegionY (int y);
				public void setU (double u);
				public void setU2 (double u2);
				public void setV (double v);
				public void setV2 (double v2);
				public int height { get; set; }
				public int left { get; set; }
				public int regionHeight { get; set; }
				public int regionWidth { get; set; }
				public sdx.graphics.Texture texture { get; set; }
				public int top { get; set; }
				public double u { get; set; }
				public double u2 { get; set; }
				public double v { get; set; }
				public double v2 { get; set; }
				public int width { get; set; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public struct Scale {
				public double x;
				public double y;
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public enum Format {
				Alpha,
				Intensity,
				LuminanceAlpha,
				RGB565,
				RGBA4444,
				RGB888,
				RGBA8888;
				public static sdx.graphics.s2d.Format from (string value);
				public string to_string ();
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public enum TextureFilter {
				Nearest,
				Linear,
				MipMap,
				MipMapNearestNearest,
				MipMapLinearNearest,
				MipMapNearestLinear,
				MipMapLinearLinear;
				public static sdx.graphics.s2d.TextureFilter from (string value);
				public bool isMipMap ();
				public string to_string ();
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public enum TextureWrap {
				ClampToEdge,
				Repeat;
				public static sdx.graphics.s2d.TextureWrap from (string value);
				public string to_string ();
			}
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class Color : GLib.Object {
			public uint8 a8;
			public uint8 b8;
			public uint8 g8;
			public uint8 r8;
			public Color (int64 value = 0);
			public sdx.graphics.Color clamp ();
			public Color.clone (sdx.graphics.Color color);
			public Color.rgba (double r, double g, double b, double a);
			public sdx.graphics.Color @set (sdx.graphics.Color color);
			public int toIntBits ();
			public static sdx.graphics.Color AliceBlue { get; }
			public static sdx.graphics.Color AntiqueWhite { get; }
			public static sdx.graphics.Color Aqua { get; }
			public static sdx.graphics.Color Aquamarine { get; }
			public static sdx.graphics.Color Azure { get; }
			public static sdx.graphics.Color BLACK { get; }
			public static sdx.graphics.Color BLUE { get; }
			public static sdx.graphics.Color BROWN { get; }
			public static sdx.graphics.Color Beige { get; }
			public static sdx.graphics.Color Bisque { get; }
			public static sdx.graphics.Color Black { get; }
			public static sdx.graphics.Color BlanchedAlmond { get; }
			public static sdx.graphics.Color Blue { get; }
			public static sdx.graphics.Color BlueViolet { get; }
			public static sdx.graphics.Color Brown { get; }
			public static sdx.graphics.Color BurlyWood { get; }
			public static sdx.graphics.Color CHARTREUSE { get; }
			public static sdx.graphics.Color CLEAR { get; }
			public static sdx.graphics.Color CYAN { get; }
			public static sdx.graphics.Color CadetBlue { get; }
			public static sdx.graphics.Color Chartreuse { get; }
			public static sdx.graphics.Color Chocolate { get; }
			public static sdx.graphics.Color Coral { get; }
			public static sdx.graphics.Color CornflowerBlue { get; }
			public static sdx.graphics.Color Cornsilk { get; }
			public static sdx.graphics.Color Crimson { get; }
			public static sdx.graphics.Color Cyan { get; }
			public static sdx.graphics.Color DARK_GRAY { get; }
			public static sdx.graphics.Color DarkBlue { get; }
			public static sdx.graphics.Color DarkCyan { get; }
			public static sdx.graphics.Color DarkGoldenrod { get; }
			public static sdx.graphics.Color DarkGray { get; }
			public static sdx.graphics.Color DarkGreen { get; }
			public static sdx.graphics.Color DarkKhaki { get; }
			public static sdx.graphics.Color DarkMagenta { get; }
			public static sdx.graphics.Color DarkOliveGreen { get; }
			public static sdx.graphics.Color DarkOrange { get; }
			public static sdx.graphics.Color DarkOrchid { get; }
			public static sdx.graphics.Color DarkRed { get; }
			public static sdx.graphics.Color DarkSalmon { get; }
			public static sdx.graphics.Color DarkSeaGreen { get; }
			public static sdx.graphics.Color DarkSlateBlue { get; }
			public static sdx.graphics.Color DarkSlateGray { get; }
			public static sdx.graphics.Color DarkTurquoise { get; }
			public static sdx.graphics.Color DarkViolet { get; }
			public static sdx.graphics.Color DeepPink { get; }
			public static sdx.graphics.Color DeepSkyBlue { get; }
			public static sdx.graphics.Color DimGray { get; }
			public static sdx.graphics.Color DodgerBlue { get; }
			public static sdx.graphics.Color FIREBRICK { get; }
			public static sdx.graphics.Color FOREST { get; }
			public static sdx.graphics.Color Firebrick { get; }
			public static sdx.graphics.Color FloralWhite { get; }
			public static sdx.graphics.Color ForestGreen { get; }
			public static sdx.graphics.Color Fuchsia { get; }
			public static sdx.graphics.Color GOLD { get; }
			public static sdx.graphics.Color GOLDENROD { get; }
			public static sdx.graphics.Color GRAY { get; }
			public static sdx.graphics.Color GREEN { get; }
			public static sdx.graphics.Color Gainsboro { get; }
			public static sdx.graphics.Color GhostWhite { get; }
			public static sdx.graphics.Color Gold { get; }
			public static sdx.graphics.Color Goldenrod { get; }
			public static sdx.graphics.Color Gray { get; }
			public static sdx.graphics.Color Green { get; }
			public static sdx.graphics.Color GreenYellow { get; }
			public static sdx.graphics.Color Honeydew { get; }
			public static sdx.graphics.Color HotPink { get; }
			public static sdx.graphics.Color IndianRed { get; }
			public static sdx.graphics.Color Indigo { get; }
			public static sdx.graphics.Color Ivory { get; }
			public static sdx.graphics.Color Khaki { get; }
			public static sdx.graphics.Color LIGHT_GRAY { get; }
			public static sdx.graphics.Color LIME { get; }
			public static sdx.graphics.Color Lavender { get; }
			public static sdx.graphics.Color LavenderBlush { get; }
			public static sdx.graphics.Color LawnGreen { get; }
			public static sdx.graphics.Color LemonChiffon { get; }
			public static sdx.graphics.Color LightBlue { get; }
			public static sdx.graphics.Color LightCoral { get; }
			public static sdx.graphics.Color LightCyan { get; }
			public static sdx.graphics.Color LightGoldenrodYellow { get; }
			public static sdx.graphics.Color LightGray { get; }
			public static sdx.graphics.Color LightGreen { get; }
			public static sdx.graphics.Color LightPink { get; }
			public static sdx.graphics.Color LightSalmon { get; }
			public static sdx.graphics.Color LightSeaGreen { get; }
			public static sdx.graphics.Color LightSkyBlue { get; }
			public static sdx.graphics.Color LightSlateGray { get; }
			public static sdx.graphics.Color LightSteelBlue { get; }
			public static sdx.graphics.Color LightYellow { get; }
			public static sdx.graphics.Color Lime { get; }
			public static sdx.graphics.Color LimeGreen { get; }
			public static sdx.graphics.Color Linen { get; }
			public static sdx.graphics.Color MAGENTA { get; }
			public static sdx.graphics.Color MAROON { get; }
			public static sdx.graphics.Color Magenta { get; }
			public static sdx.graphics.Color Maroon { get; }
			public static sdx.graphics.Color MediumAquamarine { get; }
			public static sdx.graphics.Color MediumBlue { get; }
			public static sdx.graphics.Color MediumOrchid { get; }
			public static sdx.graphics.Color MediumPurple { get; }
			public static sdx.graphics.Color MediumSeaGreen { get; }
			public static sdx.graphics.Color MediumSlateBlue { get; }
			public static sdx.graphics.Color MediumSpringGreen { get; }
			public static sdx.graphics.Color MediumTurquoise { get; }
			public static sdx.graphics.Color MediumVioletRed { get; }
			public static sdx.graphics.Color MidnightBlue { get; }
			public static sdx.graphics.Color MintCream { get; }
			public static sdx.graphics.Color MistyRose { get; }
			public static sdx.graphics.Color Moccasin { get; }
			public static sdx.graphics.Color MonoGameOrange { get; }
			public static sdx.graphics.Color NAVY { get; }
			public static sdx.graphics.Color NavajoWhite { get; }
			public static sdx.graphics.Color Navy { get; }
			public static sdx.graphics.Color OLIVE { get; }
			public static sdx.graphics.Color ORANGE { get; }
			public static sdx.graphics.Color OldLace { get; }
			public static sdx.graphics.Color Olive { get; }
			public static sdx.graphics.Color OliveDrab { get; }
			public static sdx.graphics.Color Orange { get; }
			public static sdx.graphics.Color OrangeRed { get; }
			public static sdx.graphics.Color Orchid { get; }
			public static sdx.graphics.Color PINK { get; }
			public static sdx.graphics.Color PURPLE { get; }
			public static sdx.graphics.Color PaleGoldenrod { get; }
			public static sdx.graphics.Color PaleGreen { get; }
			public static sdx.graphics.Color PaleTurquoise { get; }
			public static sdx.graphics.Color PaleVioletRed { get; }
			public static sdx.graphics.Color PapayaWhip { get; }
			public static sdx.graphics.Color PeachPuff { get; }
			public static sdx.graphics.Color Peru { get; }
			public static sdx.graphics.Color Pink { get; }
			public static sdx.graphics.Color Plum { get; }
			public static sdx.graphics.Color PowderBlue { get; }
			public static sdx.graphics.Color Purple { get; }
			public static sdx.graphics.Color RED { get; }
			public static sdx.graphics.Color ROYAL { get; }
			public static sdx.graphics.Color Red { get; }
			public static sdx.graphics.Color RosyBrown { get; }
			public static sdx.graphics.Color RoyalBlue { get; }
			public static sdx.graphics.Color SALMON { get; }
			public static sdx.graphics.Color SCARLET { get; }
			public static sdx.graphics.Color SKY { get; }
			public static sdx.graphics.Color SLATE { get; }
			public static sdx.graphics.Color SaddleBrown { get; }
			public static sdx.graphics.Color Salmon { get; }
			public static sdx.graphics.Color SandyBrown { get; }
			public static sdx.graphics.Color SeaGreen { get; }
			public static sdx.graphics.Color SeaShell { get; }
			public static sdx.graphics.Color Sienna { get; }
			public static sdx.graphics.Color Silver { get; }
			public static sdx.graphics.Color SkyBlue { get; }
			public static sdx.graphics.Color SlateBlue { get; }
			public static sdx.graphics.Color SlateGray { get; }
			public static sdx.graphics.Color Snow { get; }
			public static sdx.graphics.Color SpringGreen { get; }
			public static sdx.graphics.Color SteelBlue { get; }
			public static sdx.graphics.Color TAN { get; }
			public static sdx.graphics.Color TEAL { get; }
			public static sdx.graphics.Color Tan { get; }
			public static sdx.graphics.Color Teal { get; }
			public static sdx.graphics.Color Thistle { get; }
			public static sdx.graphics.Color Tomato { get; }
			public static sdx.graphics.Color TransparentBlack { get; }
			public static sdx.graphics.Color TransparentWhite { get; }
			public static sdx.graphics.Color Turquoise { get; }
			public static sdx.graphics.Color VIOLET { get; }
			public static sdx.graphics.Color Violet { get; }
			public static sdx.graphics.Color WHITE { get; }
			public static sdx.graphics.Color Wheat { get; }
			public static sdx.graphics.Color White { get; }
			public static sdx.graphics.Color WhiteSmoke { get; }
			public static sdx.graphics.Color YELLOW { get; }
			public static sdx.graphics.Color Yellow { get; }
			public static sdx.graphics.Color YellowGreen { get; }
			public double a { get; set; }
			public double b { get; set; }
			public double g { get; set; }
			public double r { get; set; }
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class Texture : GLib.Object {
			public SDL.Video.Surface data;
			public Texture (sdx.files.FileHandle file);
			public static SDL.Video.Surface getSurface (string ext, SDL.RWops raw);
			public void setFilter (int minFilter, int magFilter);
			public void setWrap (int u, int v);
			public Texture.uri (string path);
			public int height { get; }
			public string path { get; set; }
			public int width { get; }
		}
	}
	namespace math {
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class Rectangle : GLib.Object {
			public double height;
			public double width;
			public double x;
			public double y;
			public Rectangle (double x = 0, double y = 0, double width = 0, double height = 0);
			public Rectangle.rectangle (sdx.math.Rectangle rect);
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class Vector2 : GLib.Object {
			public double x;
			public double y;
			public Vector2 (double x = 0, double y = 0);
			public sdx.math.Vector2 @set (double x, double y);
			public sdx.math.Vector2 setZero ();
			public Vector2.vector (sdx.math.Vector2 v);
			public static sdx.math.Vector2 X { get; }
			public static sdx.math.Vector2 Y { get; }
			public static sdx.math.Vector2 Zero { get; }
		}
	}
	namespace scenes {
		namespace scene2d {
			namespace ui {
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class Image : sdx.scenes.scene2d.ui.Widget {
					public int align;
					public sdx.scenes.scene2d.utils.Drawable drawable;
					public double imageHeight;
					public double imageWidth;
					public double imageX;
					public double imageY;
					public sdx.scenes.scene2d.ui.Scaling scaling;
					public Image (sdx.scenes.scene2d.utils.Drawable drawable = null, sdx.scenes.scene2d.ui.Scaling scaling = Scaling.stretch, int align = 0);
					public void draw (sdx.graphics.s2d.Batch batch, double parentAlpha);
					public sdx.scenes.scene2d.utils.Drawable getDrawable ();
					public double getImageHeight ();
					public double getImageWidth ();
					public double getImageX ();
					public double getImageY ();
					public double getMinHeight ();
					public double getMinWidth ();
					public double getPrefHeight ();
					public double getPrefWidth ();
					public void layout ();
					public Image.ninepatch (sdx.graphics.s2d.NinePatch patch);
					public Image.region (sdx.graphics.s2d.TextureRegion region);
					public void setAlign (int align);
					public void setDrawable (sdx.scenes.scene2d.utils.Drawable drawable);
					public void setScaling (sdx.scenes.scene2d.ui.Scaling scaling);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class Label : sdx.scenes.scene2d.ui.Widget {
					public class LabelStyle : GLib.Object {
						public sdx.graphics.s2d.Font font;
						public sdx.graphics.Color fontColor;
						public LabelStyle (sdx.graphics.s2d.Font font, sdx.graphics.Color color);
					}
					public int labelAlign;
					public int lineAlign;
					public string text;
					public Label (string text, sdx.scenes.scene2d.ui.Label.LabelStyle style);
					public void draw (sdx.graphics.s2d.Batch batch, double parentAlpha);
					public sdx.scenes.scene2d.ui.Label.LabelStyle getStyle ();
					public string getText ();
					public void layout ();
					public void setAlignment (int labelAlign, int lineAlign = -1);
					public void setStyle (sdx.scenes.scene2d.ui.Label.LabelStyle style);
					public void setText (string newText);
					public bool textEquals (string other);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class Widget : sdx.scenes.scene2d.Actor, sdx.scenes.scene2d.utils.Layout {
					public Widget ();
					public void draw (sdx.graphics.s2d.Batch batch, double parentAlpha);
					public void sizeChanged ();
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public enum Scaling {
					fit,
					fill,
					fillX,
					fillY,
					stretch,
					stretchX,
					stretchY,
					none;
					public sdx.math.Vector2 apply (double sourceWidth, double sourceHeight, double targetWidth, double targetHeight);
				}
			}
			namespace utils {
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class BaseDrawable : GLib.Object, sdx.scenes.scene2d.utils.Drawable {
					public double bottomHeight;
					public double leftWidth;
					public double minHeight;
					public double minWidth;
					public string name;
					public double rightWidth;
					public double topHeight;
					public BaseDrawable (sdx.scenes.scene2d.utils.Drawable? drawable = null);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class ClickListener : sdx.scenes.scene2d.InputListener {
					public ClickListener ();
					public void cancel ();
					public void clicked (sdx.scenes.scene2d.InputEvent event, double x, double y);
					public void enter (sdx.scenes.scene2d.InputEvent event, float x, float y, int pointer, sdx.scenes.scene2d.Actor fromActor);
					public void exit (sdx.scenes.scene2d.InputEvent event, float x, float y, int pointer, sdx.scenes.scene2d.Actor toActor);
					public bool inTapSquare (double x, double y);
					public void invalidateTapSquare ();
					public bool isOver (sdx.scenes.scene2d.Actor actor, double x, double y);
					public bool isPressed ();
					public bool isVisualPressed ();
					public void setTapCountInterval (double tapCountInterval);
					public bool touchDown (sdx.scenes.scene2d.InputEvent event, float x, float y, int pointer, int button);
					public void touchDragged (sdx.scenes.scene2d.InputEvent event, float x, float y, int pointer);
					public void touchUp (sdx.scenes.scene2d.InputEvent event, float x, float y, int pointer, int button);
					public ClickListener.with_button (int button);
					public int button { get; set; }
					public int pressedButton { get; }
					public int pressedPointer { get; }
					public int tapCount { get; set; }
					public double tapSquareSize { get; set; }
					public double touchDownX { get; }
					public double touchDownY { get; }
					public static double visualPressedDuration { get; set; }
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class FocusEvent : sdx.scenes.scene2d.Event, sdx.utils.Poolable {
					public enum FocusEventType {
						keyboard,
						scroll
					}
					public bool focused;
					public sdx.scenes.scene2d.Actor relatedActor;
					public sdx.scenes.scene2d.utils.FocusEvent.FocusEventType type;
					public FocusEvent ();
					public sdx.scenes.scene2d.Actor getRelatedActor ();
					public sdx.scenes.scene2d.utils.FocusEvent.FocusEventType getType ();
					public bool isFocused ();
					public void setFocused (bool focused);
					public void setRelatedActor (sdx.scenes.scene2d.Actor relatedActor);
					public void setType (sdx.scenes.scene2d.utils.FocusEvent.FocusEventType focusType);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public abstract class FocusListener : GLib.Object, sdx.scenes.scene2d.EventListener {
					public FocusListener ();
					public abstract void keyboardFocusChanged (sdx.scenes.scene2d.utils.FocusEvent event, sdx.scenes.scene2d.Actor actor, bool focused);
					public abstract void scrollFocusChanged (sdx.scenes.scene2d.utils.FocusEvent event, sdx.scenes.scene2d.Actor actor, bool focused);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class NinePatchDrawable : sdx.scenes.scene2d.utils.BaseDrawable {
					public NinePatchDrawable (sdx.graphics.s2d.NinePatch? patch);
					public void draw (sdx.graphics.s2d.Batch batch, double x, double y, double width, double height);
					public NinePatchDrawable.drawable (sdx.scenes.scene2d.utils.NinePatchDrawable drawable);
					public sdx.graphics.s2d.NinePatch getPatch ();
					public void setPatch (sdx.graphics.s2d.NinePatch patch);
					public sdx.scenes.scene2d.utils.NinePatchDrawable tint (sdx.graphics.Color tint);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public class TextureRegionDrawable : sdx.scenes.scene2d.utils.BaseDrawable {
					public sdx.graphics.s2d.TextureRegion region;
					public TextureRegionDrawable (sdx.graphics.s2d.TextureRegion region);
					public sdx.graphics.s2d.TextureRegion getRegion ();
					public void setRegion (sdx.graphics.s2d.TextureRegion region);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public interface Drawable : GLib.Object {
					public abstract void draw (sdx.graphics.s2d.Batch batch, double x, double y, double width, double height);
					public abstract double getBottomHeight ();
					public abstract double getLeftWidth ();
					public abstract double getMinHeight ();
					public abstract double getMinWidth ();
					public abstract double getRightWidth ();
					public abstract double getTopHeight ();
					public abstract void setBottomHeight (double bottomHeight);
					public abstract void setLeftWidth (double leftWidth);
					public abstract void setMinHeight (double minHeight);
					public abstract void setMinWidth (double minWidth);
					public abstract void setRightWidth (double rightWidth);
					public abstract void setTopHeight (double topHeight);
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public interface Layout : GLib.Object {
					public abstract double getMaxHeight ();
					public abstract double getMaxWidth ();
					public abstract double getMinHeight ();
					public abstract double getMinWidth ();
					public abstract double getPrefHeight ();
					public abstract double getPrefWidth ();
					public abstract void invalidate ();
					public abstract void invalidateHierarchy ();
					public abstract void layout ();
					public abstract void pack ();
					public abstract void setFillParent (bool fillParent);
					public abstract void setLayoutEnabled (bool enabled);
					public abstract void validate ();
				}
				[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
				public interface TransformDrawable : sdx.scenes.scene2d.utils.Drawable {
					public abstract void draw (sdx.graphics.s2d.Batch batch, double x, double y, double originX, double originY, double width, double height, double scaleX, double scaleY, double rotation);
				}
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public abstract class Action : GLib.Object, sdx.utils.Poolable {
				public Action ();
				public abstract bool act (double delta);
				public void restart ();
				public sdx.scenes.scene2d.Actor actor { get; set; }
				public sdx.utils.Pool pool { get; set; }
				public sdx.scenes.scene2d.Actor target { get; set; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Actor : GLib.Object {
				public Gee.ArrayList<sdx.scenes.scene2d.Action> actions;
				public Gee.ArrayList<sdx.scenes.scene2d.EventListener> captureListeners;
				public double height;
				public Gee.ArrayList<sdx.scenes.scene2d.EventListener> listeners;
				public double originX;
				public double originY;
				public double rotation;
				public double scaleX;
				public double scaleY;
				public bool visible;
				public double width;
				public double x;
				public double y;
				public Actor ();
				public void act (double delta);
				public void addAction (sdx.scenes.scene2d.Action action);
				public bool addCaptureListener (sdx.scenes.scene2d.EventListener listener);
				public bool addListener (sdx.scenes.scene2d.EventListener listener);
				public void clear ();
				public void clearActions ();
				public void clearListeners ();
				public void draw (sdx.graphics.s2d.Batch batch, double parentAlpha);
				public bool fire (sdx.scenes.scene2d.Event event);
				public sdx.scenes.scene2d.Actor firstAscendant (GLib.Type type);
				public Gee.ArrayList<sdx.scenes.scene2d.Action> getActions ();
				public Gee.ArrayList<sdx.scenes.scene2d.EventListener> getCaptureListeners ();
				public double getHeight ();
				public Gee.ArrayList<sdx.scenes.scene2d.EventListener> getListeners ();
				public double getOriginX ();
				public double getOriginY ();
				public double getRight ();
				public double getRotation ();
				public double getScaleX ();
				public double getScaleY ();
				public double getTop ();
				public double getWidth ();
				public double getX ();
				public double getY ();
				public int getZIndex ();
				public bool hasActions ();
				public bool hasParent ();
				public sdx.scenes.scene2d.Actor hit (double x, double y, bool touchable);
				public bool isAscendantOf (sdx.scenes.scene2d.Actor actor);
				public bool isDescendantOf (sdx.scenes.scene2d.Actor actor);
				public bool isTouchable ();
				public bool isVisible ();
				public sdx.math.Vector2 localToAscendantCoordinates (sdx.scenes.scene2d.Actor ascendant, sdx.math.Vector2 localCoords);
				public sdx.math.Vector2 localToParentCoordinates (sdx.math.Vector2 localCoords);
				public sdx.math.Vector2 localToStageCoordinates (sdx.math.Vector2 localCoords);
				public void moveBy (double x, double y);
				public bool notify (sdx.scenes.scene2d.Event event, bool capture);
				public sdx.math.Vector2 parentToLocalCoordinates (sdx.math.Vector2 parentCoords);
				public void positionChanged ();
				public bool remove ();
				public void removeAction (sdx.scenes.scene2d.Action action);
				public bool removeCaptureListener (sdx.scenes.scene2d.EventListener listener);
				public bool removeListener (sdx.scenes.scene2d.EventListener listener);
				public void rotateBy (double amountInDegrees);
				public void rotationChanged ();
				public void scaleBy (double scaleX, double scaleY);
				public sdx.math.Vector2 screenToLocalCoordinates (sdx.math.Vector2 screenCoords);
				public void setBounds (double x, double y, double width, double height);
				public void setHeight (double height);
				public void setOrigin (double originX, double originY);
				public void setOriginX (double originX);
				public void setOriginY (double originY);
				public void setPosition (double x, double y);
				public void setRotation (double degrees);
				public void setScale (double scaleX, double scaleY = 0);
				public void setScaleX (double scaleX);
				public void setScaleY (double scaleXY);
				public void setSize (double width, double height);
				public void setVisible (bool visible);
				public void setWidth (double width);
				public void setX (double x);
				public void setY (double y);
				public void setZIndex (int index);
				public void sizeBy (double size);
				public void sizeChanged ();
				public sdx.math.Vector2 stageToLocalCoordinates (sdx.math.Vector2 stageCoords);
				public void toBack ();
				public void toFront ();
				public sdx.graphics.Color color { get; set; }
				public string name { get; set; }
				public sdx.scenes.scene2d.Group parent { get; set; }
				public sdx.scenes.scene2d.Stage stage { get; set; }
				public sdx.scenes.scene2d.Touchable touchable { get; set; }
				public GLib.Object userObject { get; set; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Event : GLib.Object, sdx.utils.Poolable {
				public Event ();
				public void cancel ();
				public bool getBubbles ();
				public sdx.scenes.scene2d.Actor getListenerActor ();
				public sdx.scenes.scene2d.Stage getStage ();
				public sdx.scenes.scene2d.Actor getTarget ();
				public void handle ();
				public bool isCancelled ();
				public bool isCapture ();
				public bool isHandled ();
				public bool isStopped ();
				public void setBubbles (bool bubbles);
				public void setCapture (bool capture);
				public void setListenerActor (sdx.scenes.scene2d.Actor listenerActor);
				public void setStage (sdx.scenes.scene2d.Stage stage);
				public void setTarget (sdx.scenes.scene2d.Actor targetActor);
				public void stop ();
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Group : sdx.scenes.scene2d.Actor, sdx.scenes.scene2d.Cullable {
				public Group ();
				public void act (double delta);
				public void addActor (sdx.scenes.scene2d.Actor actor);
				public void addActorAfter (sdx.scenes.scene2d.Actor actorAfter, sdx.scenes.scene2d.Actor actor);
				public void addActorAt (int index, sdx.scenes.scene2d.Actor actor);
				public void addActorBefore (sdx.scenes.scene2d.Actor actorBefore, sdx.scenes.scene2d.Actor actor);
				public void childrenChanged ();
				public void clear ();
				public void clearChildren ();
				public void draw (sdx.graphics.s2d.Batch batch, double parentAlpha);
				public void drawChildren (sdx.graphics.s2d.Batch batch, double parentAlpha);
				public sdx.scenes.scene2d.Actor findActor (string name);
				public sdx.math.Rectangle getCullingArea ();
				public bool hasChildren ();
				public sdx.scenes.scene2d.Actor hit (double x, double y, bool touchable);
				public bool isTransform ();
				public sdx.math.Vector2 localToDescendantCoordinates (sdx.scenes.scene2d.Actor descendant, sdx.math.Vector2 localCoords);
				public bool removeActor (sdx.scenes.scene2d.Actor actor, bool unfocus = true);
				public void setTransform (bool transform);
				public Gee.ArrayList<sdx.scenes.scene2d.Actor> children { get; set; }
				public sdx.scenes.scene2d.Stage stage { get; set; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class InputEvent : sdx.scenes.scene2d.Event, sdx.utils.Poolable {
				public int button;
				public char character;
				public int keyCode;
				public int pointer;
				public sdx.scenes.scene2d.Actor relatedActor;
				public int scrollAmount;
				public double stageX;
				public double stageY;
				public sdx.scenes.scene2d.InputEventType type;
				public InputEvent ();
				public int getButton ();
				public char getCharacter ();
				public int getKeyCode ();
				public int getPointer ();
				public sdx.scenes.scene2d.Actor getRelatedActor ();
				public int getScrollAmount ();
				public double getStageX ();
				public double getStageY ();
				public sdx.scenes.scene2d.InputEventType getType ();
				public bool isTouchFocusCancel ();
				public void setButton (int button);
				public void setCharacter (char character);
				public void setKeyCode (int keyCode);
				public void setPointer (int pointer);
				public void setRelatedActor (sdx.scenes.scene2d.Actor relatedActor);
				public void setScrollAmount (int scrollAmount);
				public void setStageX (double stageX);
				public void setStageY (double stageY);
				public void setType (sdx.scenes.scene2d.InputEventType type);
				public sdx.math.Vector2 toCoordinates (sdx.scenes.scene2d.Actor actor, sdx.math.Vector2 actorCoords);
				public string to_string ();
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class InputListener : GLib.Object, sdx.scenes.scene2d.EventListener {
				public InputListener ();
				public void enter (sdx.scenes.scene2d.InputEvent event, double x, double y, int pointer, sdx.scenes.scene2d.Actor fromActor);
				public void exit (sdx.scenes.scene2d.InputEvent event, double x, double y, int pointer, sdx.scenes.scene2d.Actor toActor);
				public bool keyDown (sdx.scenes.scene2d.InputEvent event, int keycode);
				public bool keyTyped (sdx.scenes.scene2d.InputEvent event, char character);
				public bool keyUp (sdx.scenes.scene2d.InputEvent event, int keycode);
				public bool mouseMoved (sdx.scenes.scene2d.InputEvent event, double x, double y);
				public bool scrolled (sdx.scenes.scene2d.InputEvent event, double x, double y, int amount);
				public bool touchDown (sdx.scenes.scene2d.InputEvent event, double x, double y, int pointer, int button);
				public void touchDragged (sdx.scenes.scene2d.InputEvent event, double x, double y, int pointer);
				public void touchUp (sdx.scenes.scene2d.InputEvent event, double x, double y, int pointer, int button);
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Stage : sdx.InputAdapter, sdx.scenes.scene2d.Disposable {
				public bool actionsRequestRendering;
				public sdx.scenes.scene2d.Actor keyboardFocus;
				public sdx.scenes.scene2d.Actor mouseOverActor;
				public int mouseScreenX;
				public int mouseScreenY;
				public bool ownsBatch;
				public sdx.scenes.scene2d.Actor[] pointerOverActors;
				public int[] pointerScreenX;
				public int[] pointerScreenY;
				public bool[] pointerTouched;
				public sdx.scenes.scene2d.Actor scrollFocus;
				public Gee.ArrayList<sdx.scenes.scene2d.TouchFocus> touchFocuses;
				public Stage (sdx.utils.viewport.Viewport? viewport = null, sdx.graphics.s2d.Batch? batch = null);
				public void act (double delta);
				public void addAction (sdx.scenes.scene2d.Action action);
				public void addActor (sdx.scenes.scene2d.Actor actor);
				public bool addCaptureListener (sdx.scenes.scene2d.EventListener listener);
				public bool addListener (sdx.scenes.scene2d.EventListener listener);
				public void addTouchFocus (sdx.scenes.scene2d.EventListener listener, sdx.scenes.scene2d.Actor listenerActor, sdx.scenes.scene2d.Actor target, int pointer, int button);
				public void cancelTouchFocus (sdx.scenes.scene2d.Actor actor = null);
				public void cancelTouchFocusExcept (sdx.scenes.scene2d.EventListener exceptListener, sdx.scenes.scene2d.Actor exceptActor);
				public void clear ();
				public void draw ();
				public sdx.scenes.scene2d.Actor fireEnterAndExit (sdx.scenes.scene2d.Actor overLast, int screenX, int screenY, int pointer);
				public Gee.ArrayList<sdx.scenes.scene2d.Actor> getActors ();
				public sdx.scenes.scene2d.Actor getKeyboardFocus ();
				public sdx.scenes.scene2d.Actor getScrollFocus ();
				public sdx.scenes.scene2d.Actor hit (double stageX, double stageY, bool touchable);
				public bool keyDown (int keyCode);
				public bool keyTyped (char character);
				public bool keyUp (int keyCode);
				public bool mouseMoved (int screenX, int screenY);
				public bool removeCaptureListener (sdx.scenes.scene2d.EventListener listener);
				public bool removeListener (sdx.scenes.scene2d.EventListener listener);
				public void removeTouchFocus (sdx.scenes.scene2d.EventListener listener, sdx.scenes.scene2d.Actor listenerActor, sdx.scenes.scene2d.Actor target, int pointer, int button);
				public sdx.math.Vector2 screenToStageCoordinates (sdx.math.Vector2 screenCoords);
				public bool scrolled (int amount);
				public bool setKeyboardFocus (sdx.scenes.scene2d.Actor actor);
				public bool setScrollFocus (sdx.scenes.scene2d.Actor actor);
				public sdx.math.Vector2 stageToScreenCoordinates (sdx.math.Vector2 stageCoords);
				public bool touchDown (int screenX, int screenY, int pointer, int button);
				public bool touchDragged (int screenX, int screenY, int pointer);
				public bool touchUp (int screenX, int screenY, int pointer, int button);
				public void unfocus (sdx.scenes.scene2d.Actor actor);
				public void unfocusAll ();
				public sdx.graphics.s2d.Batch batch { get; set; }
				public double height { get; }
				public sdx.scenes.scene2d.Group root { get; set; }
				public sdx.utils.viewport.Viewport viewport { get; set; }
				public double width { get; }
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class TouchFocus : GLib.Object, sdx.utils.Poolable {
				public int button;
				public sdx.scenes.scene2d.EventListener listener;
				public sdx.scenes.scene2d.Actor listenerActor;
				public int pointer;
				public sdx.scenes.scene2d.Actor target;
				public TouchFocus ();
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public interface Cullable {
				public abstract void setCullingArea (sdx.math.Rectangle cullingArea);
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public interface Disposable : GLib.Object {
				public abstract void dispose ();
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public interface EventListener : GLib.Object {
				public abstract bool handle (sdx.scenes.scene2d.Event event);
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public enum InputEventType {
				touchDown,
				touchUp,
				touchDragged,
				mouseMoved,
				enter,
				exit,
				scrolled,
				keyDown,
				keyUp,
				keyTyped
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public enum Touchable {
				enabled,
				disabled,
				childrenOnly
			}
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public const double PI;
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public const double degreesToRadians;
		}
	}
	namespace utils {
		namespace viewport {
			[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
			public class Viewport {
				public int screenHeight;
				public int screenWidth;
				public int screenX;
				public int screenY;
				public double worldHeight;
				public double worldWidth;
				public Viewport ();
				public void update (int screenWidth, int screenHeight);
			}
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class JSON : GLib.Object {
			public JSON ();
			public static Json.Object parse (GLib.InputStream stream);
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public abstract class Pool : GLib.Object {
			public GLib.Queue<GLib.Object> freeObjects;
			public int max;
			public int peak;
			public Pool ();
			public void clear ();
			public void free (GLib.Object object);
			public void freeAll (GLib.Object[] objects);
			public int getFree ();
			public abstract GLib.Object newObject ();
			public GLib.Object obtain ();
			public void reset (GLib.Object object);
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class Pools : GLib.Object {
			public Pools ();
			public static void free (GLib.Object object);
			public static sdx.utils.Pool @get (GLib.Type type);
			public static sdx.utils.Pool obtain (GLib.Type type);
			public static void @set (GLib.Type type, sdx.utils.Pool pool);
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public class StringTokenizer {
			public int[] delimiterCodePoints;
			public bool hasSurrogates;
			public StringTokenizer (string str, string delim = " \t\n\r\f", bool returnDelims = false);
			public int countTokens ();
			public bool hasMoreElements ();
			public bool hasMoreTokens ();
			public bool isDelimiter (char c);
			public GLib.Object nextElement ();
			public string nextToken (string delim = "");
			public int scanToken (int startPos);
			public int skipDelimiters (int startPos);
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public interface Poolable {
			public abstract void reset ();
		}
		[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
		public enum Align {
			center,
			top,
			bottom,
			left,
			right,
			topLeft,
			topRight,
			bottomLeft,
			bottomRight
		}
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class Application : GLib.Object, sdx.IApplication {
		public string defaultFont;
		public sdx.graphics.s2d.Font font;
		public string name;
		public Gee.ArrayList<sdx.graphics.s2d.Sprite> onetime;
		public bool running;
		public bool showFps;
		public Gee.ArrayList<sdx.graphics.s2d.Sprite> sprites;
		public SDL.Video.Window window;
		public const int YieldForEventsMS;
		public Application (int width, int height, string @base);
		public virtual void dispose ();
		public virtual void draw ();
		public virtual bool initialize ();
		public int run ();
		public void setApplicationListener (sdx.ApplicationListener listener);
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class Audio : GLib.Object {
		public Audio ();
		public sdx.audio.Sound newSound (sdx.files.FileHandle file);
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class Files : GLib.Object {
		public const string separator;
		public Files (string resourcePath);
		public sdx.files.FileHandle absolute (string path);
		public sdx.files.FileHandle external (string path);
		public sdx.files.FileHandle getHandle (string path, sdx.FileType type);
		public sdx.files.FileHandle @internal (string path);
		public sdx.files.FileHandle local (string path);
		public sdx.files.FileHandle resource (string path);
		public bool isResource { get; }
		public string resourcePath { get; }
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public abstract class Game : sdx.Application, sdx.ApplicationListener {
		public sdx.Screen screen;
		public Game (int width, int height, string @base);
		public abstract void create ();
		public sdx.Screen getScreen ();
		public void setScreen (sdx.Screen screen);
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class Graphics : GLib.Object {
		public Graphics ();
		public sdx.Graphics setSize (int width, int height);
		public void updateTime ();
		public double deltaTime { get; }
		public int fps { get; }
		public int frames { get; }
		public int height { get; }
		public double pixelFactor { get; }
		public double scale { get; }
		public int width { get; }
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class Input : GLib.Object {
		public enum Buttons {
			LEFT,
			RIGHT,
			MIDDLE,
			BACK,
			FORWARD
		}
		public enum Keys {
			Esc,
			a,
			b,
			c,
			d,
			e,
			f,
			g,
			h,
			i,
			j,
			k,
			l,
			m,
			n,
			o,
			p,
			q,
			r,
			s,
			t,
			u,
			v,
			w,
			x,
			y,
			z
		}
		public Input ();
		public bool processEvents ();
		public void setInputProcessor (sdx.InputProcessor processor);
		public uint8[] keys { get; }
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class InputAdapter : GLib.Object, sdx.InputProcessor {
		public InputAdapter ();
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class JsGame : GLib.Object, sdx.IApplication {
		public string defaultFont;
		public int frames;
		public int k;
		public uint8[] keys;
		public Gee.ArrayList<sdx.graphics.s2d.Sprite> onetime;
		public double pixelFactor;
		public double scale;
		public Gee.ArrayList<sdx.graphics.s2d.Sprite> sprites;
		public double t;
		public double t1;
		public double t2;
		public double t3;
		public SDL.Video.Window window;
		public JsGame (string name, int height, int width, string @base);
		public void addOnce (GLib.Object sprite);
		public void addSprite (GLib.Object sprite);
		public void draw ();
		public int getKey (int code);
		public int handleEvents ();
		public void initialize ();
		public void removeSprite (GLib.Object sprite);
		public void setApplicationListener (sdx.ApplicationListener listener);
		public void start ();
		public string @base { get; set; }
		public double deltaTime { get; set; }
		public sdx.graphics.s2d.Font font { get; set; }
		public int fps { get; set; }
		public bool mouseDown { get; set; }
		public int mouseX { get; set; }
		public int mouseY { get; set; }
		public string name { get; set; }
		public bool profile { get; set; }
		public bool running { get; set; }
		public bool showFps { get; set; }
		public int yieldForEventsMs { get; set; }
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class Net : GLib.Object {
		public Net ();
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public class Sdx : GLib.Object {
		public Sdx (sdx.IApplication app, int width, int height, string @base);
		public static sdx.IApplication app { get; }
		public static sdx.Audio audio { get; }
		public static sdx.Files files { get; }
		public static sdx.Graphics graphics { get; }
		public static sdx.Input input { get; }
		public static sdx.Net net { get; }
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public interface ApplicationListener : GLib.Object {
		public abstract void create ();
		public abstract void dispose ();
		public abstract void pause ();
		public abstract void render ();
		public abstract void resize (int width, int height);
		public abstract void resume ();
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public interface IApplication : GLib.Object {
		public abstract int height { get; set; }
		public abstract SDL.Video.Renderer renderer { get; }
		public abstract int width { get; set; }
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public interface InputProcessor : GLib.Object {
		public abstract bool keyDown (int keycode);
		public abstract bool keyTyped (char character);
		public abstract bool keyUp (int keycode);
		public abstract bool mouseMoved (int screenX, int screenY);
		public abstract bool scrolled (int amount);
		public abstract bool touchDown (int screenX, int screenY, int pointer, int button);
		public abstract bool touchDragged (int screenX, int screenY, int pointer);
		public abstract bool touchUp (int screenX, int screenY, int pointer, int button);
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public interface Screen : GLib.Object {
		public abstract void dispose ();
		public abstract void hide ();
		public abstract void pause ();
		public abstract void render ();
		public abstract void resize (int width, int height);
		public abstract void resume ();
		public abstract void show ();
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public enum FileType {
		Internal,
		Resource,
		External,
		Absolute,
		Local
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public errordomain Exception {
		IllegalArgumentException,
		IllegalStateException,
		SdxRuntimeException,
		NullPointerException,
		NoSuchElementException,
		SDLException
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public errordomain IOException {
		FileNotFound,
		FileNoPermission,
		FileIsLocked,
		InvalidData
	}
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public const string VERSION;
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static GLib.Object createAtlas (string p);
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static GLib.Object createColor (double r, double g, double b, double a);
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static GLib.Object createFont (string path, int size);
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static GLib.Object createJsGame (string name, int height, int width, string @base);
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static GLib.Object createSound (string path);
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static GLib.Object createSprite (string path);
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static GLib.Object createText (string text, GLib.Object font, GLib.Object color);
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static string get_version ();
	[CCode (cheader_filename = "src/graphics/s2d/TextureEnums.h")]
	public static void sdlFailIf (bool cond, string reason);
}
