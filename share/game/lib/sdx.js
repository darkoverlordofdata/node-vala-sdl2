// Generated by CoffeeScript 2.0.0-alpha1

/*~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~##
##
##   Sdx ffi bindings for node
##
##   replaces sdx.gir
##   requires CoffeeScript 2.0.0-alpha1
##
##  Copyright 2017 darkoverlordofdata
##
##
#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~
 */
var Atlas, Audio, Color, Files, Font, Game, Graphics, Sound, Sprite, VAtlas, VAtlasPtr, VAudio, VAudioPtr, VColor, VColorPtr, VFileHandler, VFileHandlerPtr, VFiles, VFilesPtr, VFont, VFontPtr, VGame, VGamePtr, VGraphics, VGraphicsPtr, VSound, VSoundPtr, VSprite, VSpritePtr, VText, VTextPtr, ValaProxy, ffi, ref, sdx,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ffi = require('ffi');

ref = require('ref');

VGame = ref.types["void"];

VGamePtr = ref.refType(VGame);

VFont = ref.types["void"];

VFontPtr = ref.refType(VFont);

VSprite = ref.types["void"];

VSpritePtr = ref.refType(VSprite);

VAtlas = ref.types["void"];

VAtlasPtr = ref.refType(VAtlas);

VSound = ref.types["void"];

VSoundPtr = ref.refType(VSound);

VText = ref.types["void"];

VTextPtr = ref.refType(VText);

VColor = ref.types["void"];

VColorPtr = ref.refType(VColor);

VFiles = ref.types["void"];

VFilesPtr = ref.refType(VFiles);

VFileHandler = ref.types["void"];

VFileHandlerPtr = ref.refType(VFileHandler);

VGraphics = ref.types["void"];

VGraphicsPtr = ref.refType(VGraphics);

VAudio = ref.types["void"];

VAudioPtr = ref.refType(VAudio);

sdx = ffi.Library('sdx', {
  sdx_createJsGame: [VGamePtr, ['string', 'int', 'int', 'string']],
  sdx_createSprite: [VSpritePtr, ['string']],
  sdx_createAtlas: [VAtlasPtr, ['string']],
  sdx_createSound: [VSoundPtr, ['string']],
  sdx_createFont: [VFontPtr, ['string', 'int']],
  sdx_createText: [VTextPtr, ['string', VFontPtr, VColorPtr]],
  sdx_createColor: [VColorPtr, ['double', 'double', 'double', 'double']],
  sdx_audio_sound_play: ['void', [VSoundPtr, 'int']],
  sdx_audio_newSound: [VSoundPtr, [VAudioPtr]],
  sdx_files_get_isResource: ['bool', [VFilesPtr]],
  sdx_files_get_resourcePath: ['bool', [VFilesPtr]],
  sdx_files_getHandle: [VFileHandlerPtr, [VFilesPtr, 'string', 'int']],
  sdx_files_internal: [VFileHandlerPtr, [VFilesPtr, 'string']],
  sdx_files_resource: [VFileHandlerPtr, [VFilesPtr, 'string']],
  sdx_files_external: [VFileHandlerPtr, [VFilesPtr, 'string']],
  sdx_files_absolute: [VFileHandlerPtr, [VFilesPtr, 'string']],
  sdx_files_local: [VFileHandlerPtr, [VFilesPtr, 'string']],
  sdx_graphics_get_deltaTime: ['double', [VGraphicsPtr]],
  sdx_graphics_get_frames: ['int', [VGraphicsPtr]],
  sdx_graphics_get_fps: ['int', [VGraphicsPtr]],
  sdx_graphics_get_width: ['int', [VGraphicsPtr]],
  sdx_graphics_get_height: ['int', [VGraphicsPtr]],
  sdx_graphics_get_scale: ['double', [VGraphicsPtr]],
  sdx_graphics_get_pixelFactor: ['double', [VGraphicsPtr]],
  sdx_graphics_setSize: ['void', [VGraphicsPtr, 'int', 'int']],
  sdx_graphics_updateTime: ['void', [VGraphicsPtr]],
  sdx_graphics_color_get_r: ['double', [VColorPtr]],
  sdx_graphics_color_set_r: ['void', [VColorPtr, 'double']],
  sdx_graphics_color_get_g: ['double', [VColorPtr]],
  sdx_graphics_color_set_g: ['void', [VColorPtr, 'double']],
  sdx_graphics_color_get_b: ['double', [VColorPtr]],
  sdx_graphics_color_set_b: ['void', [VColorPtr, 'double']],
  sdx_graphics_color_get_a: ['double', [VColorPtr]],
  sdx_graphics_color_set_a: ['void', [VColorPtr, 'double']],
  sdx_graphics_color_get_RED: [VColorPtr, []],
  sdx_graphics_color_get_CLEAR: [VColorPtr, []],
  sdx_graphics_color_get_BLACK: [VColorPtr, []],
  sdx_graphics_color_get_WHITE: [VColorPtr, []],
  sdx_graphics_color_get_LIGHT_GRAY: [VColorPtr, []],
  sdx_graphics_color_get_GRAY: [VColorPtr, []],
  sdx_graphics_color_get_DARK_GRAY: [VColorPtr, []],
  sdx_graphics_color_get_BLUE: [VColorPtr, []],
  sdx_graphics_color_get_NAVY: [VColorPtr, []],
  sdx_graphics_color_get_ROYAL: [VColorPtr, []],
  sdx_graphics_color_get_SLATE: [VColorPtr, []],
  sdx_graphics_color_get_SKY: [VColorPtr, []],
  sdx_graphics_color_get_CYAN: [VColorPtr, []],
  sdx_graphics_color_get_TEAL: [VColorPtr, []],
  sdx_graphics_color_get_GREEN: [VColorPtr, []],
  sdx_graphics_color_get_CHARTREUSE: [VColorPtr, []],
  sdx_graphics_color_get_LIME: [VColorPtr, []],
  sdx_graphics_color_get_FOREST: [VColorPtr, []],
  sdx_graphics_color_get_OLIVE: [VColorPtr, []],
  sdx_graphics_color_get_YELLOW: [VColorPtr, []],
  sdx_graphics_color_get_GOLD: [VColorPtr, []],
  sdx_graphics_color_get_GOLDENROD: [VColorPtr, []],
  sdx_graphics_color_get_ORANGE: [VColorPtr, []],
  sdx_graphics_color_get_BROWN: [VColorPtr, []],
  sdx_graphics_color_get_TAN: [VColorPtr, []],
  sdx_graphics_color_get_FIREBRICK: [VColorPtr, []],
  sdx_graphics_color_get_RED: [VColorPtr, []],
  sdx_graphics_color_get_SCARLET: [VColorPtr, []],
  sdx_graphics_color_get_SALMON: [VColorPtr, []],
  sdx_graphics_color_get_PINK: [VColorPtr, []],
  sdx_graphics_color_get_MAGENTA: [VColorPtr, []],
  sdx_graphics_color_get_PURPLE: [VColorPtr, []],
  sdx_graphics_color_get_VIOLET: [VColorPtr, []],
  sdx_graphics_color_get_MAROON: [VColorPtr, []],
  sdx_graphics_s2d_font_get_path: ['string', [VFontPtr]],
  sdx_graphics_s2d_sprite_get_x: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_x: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_y: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_y: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_r: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_r: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_g: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_g: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_b: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_b: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_a: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_a: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_width: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_width: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_height: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_height: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_get_centered: ['bool', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_centered: ['void', [VSpritePtr, 'bool']],
  sdx_graphics_s2d_sprite_get_layer: ['int', [VSpritePtr]],
  sdx_graphics_s2d_sprite_set_layer: ['void', [VSpritePtr, 'int']],
  sdx_graphics_s2d_sprite_setScale: ['void', [VSpritePtr, 'double', 'double']],
  sdx_graphics_s2d_sprite_setColor: ['void', [VSpritePtr, 'double', 'double', 'double']],
  sdx_graphics_s2d_sprite_setText: ['void', [VSpritePtr, 'string', VFontPtr, VColorPtr]],
  sdx_graphics_s2d_texture_atlas_createSprite: [VSpritePtr, [VAtlasPtr, 'string', 'int']],
  sdx_iapplication_get_width: ['int', [VGamePtr]],
  sdx_iapplication_get_height: ['int', [VGamePtr]],
  sdx_js_game_start: ['void', [VGamePtr]],
  sdx_js_game_get_running: ['bool', [VGamePtr]],
  sdx_js_game_handleEvents: ['void', [VGamePtr]],
  sdx_js_game_getKey: ['bool', [VGamePtr, 'int']],
  sdx_js_game_draw: ['void', [VGamePtr]],
  sdx_js_game_get_base: ['string', [VGamePtr]],
  sdx_js_game_get_profile: ['bool', [VGamePtr]],
  sdx_js_game_set_profile: ['void', [VGamePtr, 'bool']],
  sdx_js_game_get_mouseX: ['int', [VGamePtr]],
  sdx_js_game_get_mouseY: ['int', [VGamePtr]],
  sdx_js_game_get_mouseDown: ['bool', [VGamePtr]],
  sdx_js_game_get_showFps: ['bool', [VGamePtr]],
  sdx_js_game_set_showFps: ['void', [VGamePtr], 'bool'],
  sdx_js_game_get_deltaTime: ['double', [VGamePtr]],
  sdx_js_game_addSprite: ['void', [VGamePtr, VSpritePtr]],
  sdx_js_game_addOnce: ['void', [VGamePtr, VSpritePtr]],
  sdx_js_game_removeSprite: ['void', [VGamePtr, VSpritePtr]],
  sdx_sdx_get_app: [VGamePtr, []],
  sdx_sdx_get_graphics: [VGraphicsPtr, []],
  sdx_sdx_get_audio: [VAudioPtr, []],
  sdx_sdx_get_files: [VFilesPtr, []]
});

ValaProxy = class ValaProxy {
  static property(props) {
    return Object.defineProperties(this.prototype, props);
  }

  constructor(instance1) {
    this.instance = instance1;
  }

};

Game = (function() {
  class Game extends ValaProxy {
    constructor(instance) {
      super(instance);
      this.removeSprite = bind(this.removeSprite, this);
      this.addOnce = bind(this.addOnce, this);
      this.addSprite = bind(this.addSprite, this);
      this.draw = bind(this.draw, this);
      this.getKey = bind(this.getKey, this);
      this.handleEvents = bind(this.handleEvents, this);
      this.start = bind(this.start, this);
      Game.game = this;
      Game.audio = new Audio(sdx.sdx_sdx_get_audio());
      Game.files = new Files(sdx.sdx_sdx_get_files());
      Game.graphics = new Graphics(sdx.sdx_sdx_get_graphics());
    }

    start() {
      return sdx.sdx_js_game_start(this.instance);
    }

    handleEvents() {
      return sdx.sdx_js_game_handleEvents(this.instance);
    }

    getKey(key) {
      return sdx.sdx_js_game_getKey(this.instance, key);
    }

    draw() {
      return sdx.sdx_js_game_draw(this.instance);
    }

    addSprite(sprite) {
      return sdx.sdx_js_game_addSprite(this.instance, sprite.instance);
    }

    addOnce(sprite) {
      return sdx.sdx_js_game_addOnce(this.instance, sprite.instance);
    }

    removeSprite(sprite) {
      return sdx.sdx_js_game_removeSprite(this.instance, sprite.instance);
    }

  };

  Game.audio = null;

  Game.files = null;

  Game.game = null;

  Game.graphics = null;

  Game.property({
    name: {
      get: function() {
        return sdx.sdx_js_game_get_name(this.instance);
      }
    },
    base: {
      get: function() {
        return sdx.sdx_js_game_get_base(this.instance);
      }
    },
    running: {
      get: function() {
        return sdx.sdx_js_game_get_running(this.instance);
      }
    },
    profile: {
      get: function() {
        return sdx.sdx_js_game_get_profile(this.instance);
      },
      set: function(v) {
        return sdx.sdx_js_game_set_profile(this.instance, v);
      }
    },
    mouseX: {
      get: function() {
        return sdx.sdx_js_game_get_mouseX(this.instance);
      }
    },
    mouseY: {
      get: function() {
        return sdx.sdx_js_game_get_mouseY(this.instance);
      }
    },
    mouseDown: {
      get: function() {
        return sdx.sdx_js_game_get_mouseDown(this.instance);
      }
    },
    showFps: {
      get: function() {
        return sdx.sdx_js_game_get_showFps(this.instance);
      },
      set: function(v) {
        return sdx.sdx_js_game_set_showFps(this.instance, v);
      }
    },
    deltaTime: {
      get: function() {
        return sdx.sdx_js_game_get_deltaTime(this.instance);
      }
    },
    width: {
      get: function() {
        return sdx.sdx_iapplication_get_width(this.instance);
      }
    },
    height: {
      get: function() {
        return sdx.sdx_iapplication_get_height(this.instance);
      }
    }
  });

  return Game;

})();

Sprite = (function() {
  class Sprite extends ValaProxy {
    constructor() {
      super(...arguments);
      this.setText = bind(this.setText, this);
      this.setColor = bind(this.setColor, this);
      this.setScale = bind(this.setScale, this);
    }

    setScale(x, y) {
      return sdx.sdx_graphics_s2d_sprite_setScale(this.instance, x, y);
    }

    setColor(r, g, b) {
      return sdx.sdx_graphics_s2d_sprite_setColor(this.instance, r, g, b);
    }

    setText(str, font, color) {
      return sdx.sdx_graphics_s2d_sprite_setText(this.instance, str, font, color);
    }

  };

  Sprite.property({
    x: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_x(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_x(this.instance, v);
      }
    },
    y: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_y(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_y(this.instance, v);
      }
    },
    r: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_r(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_r(this.instance, v);
      }
    },
    g: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_g(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_g(this.instance, v);
      }
    },
    b: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_b(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_b(this.instance, v);
      }
    },
    a: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_a(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_a(this.instance, v);
      }
    },
    width: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_width(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_width(this.instance, v);
      }
    },
    height: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_height(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_height(this.instance, v);
      }
    },
    centered: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_centered(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_centered(this.instance, v);
      }
    },
    layer: {
      get: function() {
        return sdx.sdx_graphics_s2d_sprite_get_layer(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_s2d_sprite_set_layer(this.instance, v);
      }
    }
  });

  return Sprite;

})();

Atlas = class Atlas extends ValaProxy {
  constructor() {
    super(...arguments);
    this.createSprite = bind(this.createSprite, this);
  }

  createSprite(path, index = -1) {
    return new Sprite(sdx.sdx_graphics_s2d_texture_atlas_createSprite(this.instance, path, parseInt(index)));
  }

};

Sound = class Sound extends ValaProxy {
  constructor() {
    super(...arguments);
    this.play = bind(this.play, this);
  }

  play(l) {
    return sdx.sdx_audio_sound_play(this.instance, l);
  }

};

Font = (function() {
  class Font extends ValaProxy {};

  Font.property({
    path: {
      get: function() {
        return sdx.sdx_graphics_s2d_font_get_path(this.instance);
      }
    }
  });

  return Font;

})();

Color = (function() {
  class Color extends ValaProxy {};

  Color.property({
    r: {
      get: function() {
        return sdx.sdx_graphics_color_get_r(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_color_set_r(this.instance, v);
      }
    },
    g: {
      get: function() {
        return sdx.sdx_graphics_color_get_g(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_color_set_g(this.instance, v);
      }
    },
    b: {
      get: function() {
        return sdx.sdx_graphics_color_get_b(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_color_set_b(this.instance, v);
      }
    },
    a: {
      get: function() {
        return sdx.sdx_graphics_color_get_a(this.instance);
      },
      set: function(v) {
        return sdx.sdx_graphics_color_set_a(this.instance, v);
      }
    }
  });

  return Color;

})();

Graphics = (function() {
  class Graphics extends ValaProxy {
    constructor() {
      super(...arguments);
      this.updateTime = bind(this.updateTime, this);
      this.setSize = bind(this.setSize, this);
    }

    setSize(width, height) {
      return sdx.sdx_graphics_setSize(this.instance, width, height);
    }

    updateTime() {
      return sdx.sdx_graphics_updateTime(this.instance);
    }

  };

  Graphics.property({
    deltaTime: {
      get: function() {
        return sdx.sdx_graphics_get_deltaTime(this.instance);
      }
    },
    frames: {
      get: function() {
        return sdx.sdx_graphics_get_frames(this.instance);
      }
    },
    fps: {
      get: function() {
        return sdx.sdx_graphics_get_fps(this.instance);
      }
    },
    width: {
      get: function() {
        return sdx.sdx_graphics_get_width(this.instance);
      }
    },
    height: {
      get: function() {
        return sdx.sdx_graphics_get_height(this.instance);
      }
    },
    scale: {
      get: function() {
        return sdx.sdx_graphics_get_scale(this.instance);
      }
    },
    pixelFactor: {
      get: function() {
        return sdx.sdx_graphics_get_pixelFactor(this.instance);
      }
    }
  });

  return Graphics;

})();

Audio = class Audio extends ValaProxy {
  constructor() {
    super(...arguments);
    this.newSound = bind(this.newSound, this);
  }

  newSound(file) {
    return sdx.sdx_audio_newSound(this.instance, file);
  }

};

Files = (function() {
  class Files extends ValaProxy {
    constructor() {
      super(...arguments);
      this.local = bind(this.local, this);
      this.absolute = bind(this.absolute, this);
      this.external = bind(this.external, this);
      this.resource = bind(this.resource, this);
      this.internal = bind(this.internal, this);
      this.getHandle = bind(this.getHandle, this);
    }

    getHandle(path, type) {
      return sdx.sdx_files_getHandle(this.instance, path, type);
    }

    internal(path) {
      return sdx.sdx_files_internal(this.instance, path);
    }

    resource(path) {
      return sdx.sdx_files_resource(this.instance, path);
    }

    external(path) {
      return sdx.sdx_files_external(this.instance, path);
    }

    absolute(path) {
      return sdx.sdx_files_absolute(this.instance, path);
    }

    local(path) {
      return sdx.sdx_files_local(this.instance, path);
    }

  };

  Files.property({
    isResource: {
      get: function() {
        return sdx.sdx_files_get_isResource(this.instance);
      }
    },
    resourcePath: {
      get: function() {
        return sdx.sdx_files_get_resourcePath(this.instance);
      }
    }
  });

  return Files;

})();

Object.defineProperties(sdx, {
  createGame: {
    value: function(title, height, width, base) {
      return new Game(sdx.sdx_createJsGame(title, height, width, base));
    }
  },
  createSprite: {
    value: function(path) {
      return new Sprite(sdx.sdx_createSprite(path));
    }
  },
  createAtlas: {
    value: function(path) {
      return new Atlas(sdx.sdx_createAtlas(path));
    }
  },
  createSound: {
    value: function(path) {
      return new Sound(sdx.sdx_createSound(path));
    }
  },
  createFont: {
    value: function(path, size) {
      return new Font(sdx.sdx_createFont(path, size));
    }
  },
  createText: {
    value: function(text, font, color) {
      return new Sprite(sdx.sdx_createText(text, font, color));
    }
  },
  createColor: {
    value: function(r, g, b, a) {
      return new Color(sdx.sdx_createColor(r, g, b, a));
    }
  },
  graphics: {
    value: {}
  },
  Input: {
    value: {}
  },
  Sdx: {
    value: {}
  }
});

Object.defineProperties(sdx.Input, {
  Keys: {
    value: {
      Esc: 27,
      a: 97,
      b: 98,
      c: 99,
      d: 100,
      e: 101,
      f: 102,
      g: 103,
      h: 104,
      i: 105,
      j: 106,
      k: 107,
      l: 108,
      m: 109,
      n: 110,
      o: 111,
      p: 112,
      q: 113,
      r: 114,
      s: 115,
      t: 116,
      u: 117,
      v: 118,
      w: 119,
      x: 120,
      y: 121,
      z: 122
    }
  }
});

Object.defineProperties(sdx.graphics, {
  color: {
    value: {}
  }
});

Object.defineProperties(sdx.graphics.color, {
  CLEAR: {
    get: function() {
      return sdx.sdx_graphics_color_get_CLEAR();
    }
  },
  BLACK: {
    get: function() {
      return sdx.sdx_graphics_color_get_BLACK();
    }
  },
  WHITE: {
    get: function() {
      return sdx.sdx_graphics_color_get_WHITE();
    }
  },
  LIGHT_GRAY: {
    get: function() {
      return sdx.sdx_graphics_color_get_LIGHT_GRAY();
    }
  },
  GRAY: {
    get: function() {
      return sdx.sdx_graphics_color_get_GRAY();
    }
  },
  DARK_GRAY: {
    get: function() {
      return sdx.sdx_graphics_color_get_DARK_GRAY();
    }
  },
  BLUE: {
    get: function() {
      return sdx.sdx_graphics_color_get_BLUE();
    }
  },
  NAVY: {
    get: function() {
      return sdx.sdx_graphics_color_get_NAVY();
    }
  },
  ROYAL: {
    get: function() {
      return sdx.sdx_graphics_color_get_ROYAL();
    }
  },
  SLATE: {
    get: function() {
      return sdx.sdx_graphics_color_get_SLATE();
    }
  },
  SKY: {
    get: function() {
      return sdx.sdx_graphics_color_get_SKY();
    }
  },
  CYAN: {
    get: function() {
      return sdx.sdx_graphics_color_get_CYAN();
    }
  },
  TEAL: {
    get: function() {
      return sdx.sdx_graphics_color_get_TEAL();
    }
  },
  GREEN: {
    get: function() {
      return sdx.sdx_graphics_color_get_GREEN();
    }
  },
  CHARTREUSE: {
    get: function() {
      return sdx.sdx_graphics_color_get_CHARTREUSE();
    }
  },
  LIME: {
    get: function() {
      return sdx.sdx_graphics_color_get_LIME();
    }
  },
  FOREST: {
    get: function() {
      return sdx.sdx_graphics_color_get_FOREST();
    }
  },
  OLIVE: {
    get: function() {
      return sdx.sdx_graphics_color_get_OLIVE();
    }
  },
  YELLOW: {
    get: function() {
      return sdx.sdx_graphics_color_get_YELLOW();
    }
  },
  GOLD: {
    get: function() {
      return sdx.sdx_graphics_color_get_GOLD();
    }
  },
  GOLDENROD: {
    get: function() {
      return sdx.sdx_graphics_color_get_GOLDENROD();
    }
  },
  ORANGE: {
    get: function() {
      return sdx.sdx_graphics_color_get_ORANGE();
    }
  },
  BROWN: {
    get: function() {
      return sdx.sdx_graphics_color_get_BROWN();
    }
  },
  TAN: {
    get: function() {
      return sdx.sdx_graphics_color_get_TAN();
    }
  },
  FIREBRICK: {
    get: function() {
      return sdx.sdx_graphics_color_get_FIREBRICK();
    }
  },
  RED: {
    get: function() {
      return sdx.sdx_graphics_color_get_RED();
    }
  },
  SCARLET: {
    get: function() {
      return sdx.sdx_graphics_color_get_SCARLET();
    }
  },
  SALMON: {
    get: function() {
      return sdx.sdx_graphics_color_get_SALMON();
    }
  },
  PINK: {
    get: function() {
      return sdx.sdx_graphics_color_get_PINK();
    }
  },
  MAGENTA: {
    get: function() {
      return sdx.sdx_graphics_color_get_MAGENTA();
    }
  },
  PURPLE: {
    get: function() {
      return sdx.sdx_graphics_color_get_PURPLE();
    }
  },
  VIOLET: {
    get: function() {
      return sdx.sdx_graphics_color_get_VIOLET();
    }
  },
  MAROON: {
    get: function() {
      return sdx.sdx_graphics_color_get_MAROON();
    }
  }
});

Object.defineProperties(sdx.Sdx, {
  app: {
    get: function() {
      return Game.game;
    }
  },
  graphics: {
    get: function() {
      return Game.graphics;
    }
  },
  audio: {
    get: function() {
      return Game.audio;
    }
  },
  files: {
    get: function() {
      return Game.files;
    }
  }
});

module.exports = sdx;
