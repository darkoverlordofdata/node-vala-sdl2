/**
 * Entitas Generated Components and Extensions for shmupwarz
 *
 * do not edit this file
 */
import {Pool} from 'entitas'
import {Entity} from 'entitas'
import {Matcher} from 'entitas'
import {ISystem} from 'entitas'
import {IMatcher} from 'entitas'
import {IComponent} from 'entitas'
import {SingleEntityException} from 'entitas.exceptions'
import {Bag} from 'entitas.utils'


export enum CoreComponentIds {
        Bounds,
        Bullet,
        ColorAnimation,
        Enemy,
        Expires,
        Firing,
        Health,
        ParallaxStar,
        Player,
        Position,
        ScaleAnimation,
        SoundEffect,
        Sprite,
        Velocity,
        Score,
        Destroy,
        Mouse,
        Scale,
        Resource,
        Layer,
        TotalComponents
}

Entity.initialize(CoreComponentIds.TotalComponents, {"entities":200,"components":128})



export class BoundsComponent implements IComponent {
        public radius: number;  

}
export class BulletComponent implements IComponent {

}
export class ColorAnimationComponent implements IComponent {
        public redMin: number;  
        public redMax: number;  
        public redSpeed: number;  
        public greenMin: number;  
        public greenMax: number;  
        public greenSpeed: number;  
        public blueMin: number;  
        public blueMax: number;  
        public blueSpeed: number;  
        public alphaMin: number;  
        public alphaMax: number;  
        public alphaSpeed: number;  
        public redAnimate: boolean;  
        public greenAnimate: boolean;  
        public blueAnimate: boolean;  
        public alphaAnimate: boolean;  
        public repeat: boolean;  

}
export class EnemyComponent implements IComponent {

}
export class ExpiresComponent implements IComponent {
        public delay: number;  

}
export class FiringComponent implements IComponent {

}
export class HealthComponent implements IComponent {
        public health: number;  
        public maximumHealth: number;  

}
export class ParallaxStarComponent implements IComponent {

}
export class PlayerComponent implements IComponent {

}
export class PositionComponent implements IComponent {
        public x: number;  
        public y: number;  

}
export class ScaleAnimationComponent implements IComponent {
        public min: number;  
        public max: number;  
        public speed: number;  
        public repeat: boolean;  
        public active: boolean;  

}
export class SoundEffectComponent implements IComponent {
        public effect: number;  

}
export class SpriteComponent implements IComponent {
        public layer: number;  
        public object: Object;  

}
export class VelocityComponent implements IComponent {
        public x: number;  
        public y: number;  

}
export class ScoreComponent implements IComponent {
        public value: number;  

}
export class DestroyComponent implements IComponent {

}
export class MouseComponent implements IComponent {
        public x: number;  
        public y: number;  

}
export class ScaleComponent implements IComponent {
        public x: number;  
        public y: number;  

}
export class ResourceComponent implements IComponent {
        public name: string;  

}
export class LayerComponent implements IComponent {
        public ordinal: number;  

}

export class Pools {

    static _allPools:Array<Pool>

    static get allPools():Array<Pool> {
        if (Pools._allPools == null) {
            Pools._allPools = [Pools.pool]
        }
        return Pools._allPools
    }

    static _pool:Pool

    static get pool():Pool {
        if (Pools._pool == null) {
            Pools._pool = new Pool(CoreComponentIds, CoreComponentIds.TotalComponents, false)
        }

        return Pools._pool
    }
}


/**
* Entity extensions
*/


/** Entity: Bounds methods*/

  /** @type {entitas.utils.Bag} */
  Entity._boundsComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._boundsComponentPool.add(new BoundsComponent());
    }
  })();
  Entity.clearBoundsComponentPool = function() {
    Entity._boundsComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'bounds', {
    get: function() {
      return this.getComponent(CoreComponentIds.Bounds);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasBounds', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Bounds);
    }
  });
  /**
    * @param radius number
    * @return entitas.Entity
    */
  Entity.prototype.addBounds = function(radius:number) {
    let component = Entity._boundsComponentPool.size() > 0 ? Entity._boundsComponentPool.removeLast() : new BoundsComponent();
    component.radius = radius
    this.addComponent(CoreComponentIds.Bounds, component);
    return this;
  };
  /**
    * @param radius number
    * @return entitas.Entity
    */
  Entity.prototype.replaceBounds = function(radius:number) {
    let previousComponent = this.hasBounds ? this.bounds : null;
    let component = Entity._boundsComponentPool.size() > 0 ? Entity._boundsComponentPool.removeLast() : new BoundsComponent();
    component.radius = radius
    this.replaceComponent(CoreComponentIds.Bounds, component);
    if (previousComponent != null) {
      Entity._boundsComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeBounds = function() {
    let component = this.bounds;
    this.removeComponent(CoreComponentIds.Bounds);
    Entity._boundsComponentPool.add(component);
    return this;
  };

/** Entity: Bullet methods*/

  /** @type {components.BulletComponent} */
  Entity.bulletComponent = new BulletComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isBullet', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Bullet);
    },
    set: function(value) {
      if (value !== this.isBullet) {
        if (value) {
          this.addComponent(CoreComponentIds.Bullet, Entity.bulletComponent);
        } else {
          this.removeComponent(CoreComponentIds.Bullet);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setBullet = function(value) {
    this.isBullet = value;
    return this;
  };

/** Entity: ColorAnimation methods*/

  /** @type {entitas.utils.Bag} */
  Entity._colorAnimationComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._colorAnimationComponentPool.add(new ColorAnimationComponent());
    }
  })();
  Entity.clearColorAnimationComponentPool = function() {
    Entity._colorAnimationComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'colorAnimation', {
    get: function() {
      return this.getComponent(CoreComponentIds.ColorAnimation);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasColorAnimation', {
    get: function() {
      return this.hasComponent(CoreComponentIds.ColorAnimation);
    }
  });
  /**
    * @param redMin number
    * @param redMax number
    * @param redSpeed number
    * @param greenMin number
    * @param greenMax number
    * @param greenSpeed number
    * @param blueMin number
    * @param blueMax number
    * @param blueSpeed number
    * @param alphaMin number
    * @param alphaMax number
    * @param alphaSpeed number
    * @param redAnimate boolean
    * @param greenAnimate boolean
    * @param blueAnimate boolean
    * @param alphaAnimate boolean
    * @param repeat boolean
    * @return entitas.Entity
    */
  Entity.prototype.addColorAnimation = function(redMin:number,redMax:number,redSpeed:number,greenMin:number,greenMax:number,greenSpeed:number,blueMin:number,blueMax:number,blueSpeed:number,alphaMin:number,alphaMax:number,alphaSpeed:number,redAnimate:boolean,greenAnimate:boolean,blueAnimate:boolean,alphaAnimate:boolean,repeat:boolean) {
    let component = Entity._colorAnimationComponentPool.size() > 0 ? Entity._colorAnimationComponentPool.removeLast() : new ColorAnimationComponent();
    component.redMin = redMin
    component.redMax = redMax
    component.redSpeed = redSpeed
    component.greenMin = greenMin
    component.greenMax = greenMax
    component.greenSpeed = greenSpeed
    component.blueMin = blueMin
    component.blueMax = blueMax
    component.blueSpeed = blueSpeed
    component.alphaMin = alphaMin
    component.alphaMax = alphaMax
    component.alphaSpeed = alphaSpeed
    component.redAnimate = redAnimate
    component.greenAnimate = greenAnimate
    component.blueAnimate = blueAnimate
    component.alphaAnimate = alphaAnimate
    component.repeat = repeat
    this.addComponent(CoreComponentIds.ColorAnimation, component);
    return this;
  };
  /**
    * @param redMin number
    * @param redMax number
    * @param redSpeed number
    * @param greenMin number
    * @param greenMax number
    * @param greenSpeed number
    * @param blueMin number
    * @param blueMax number
    * @param blueSpeed number
    * @param alphaMin number
    * @param alphaMax number
    * @param alphaSpeed number
    * @param redAnimate boolean
    * @param greenAnimate boolean
    * @param blueAnimate boolean
    * @param alphaAnimate boolean
    * @param repeat boolean
    * @return entitas.Entity
    */
  Entity.prototype.replaceColorAnimation = function(redMin:number,redMax:number,redSpeed:number,greenMin:number,greenMax:number,greenSpeed:number,blueMin:number,blueMax:number,blueSpeed:number,alphaMin:number,alphaMax:number,alphaSpeed:number,redAnimate:boolean,greenAnimate:boolean,blueAnimate:boolean,alphaAnimate:boolean,repeat:boolean) {
    let previousComponent = this.hasColorAnimation ? this.colorAnimation : null;
    let component = Entity._colorAnimationComponentPool.size() > 0 ? Entity._colorAnimationComponentPool.removeLast() : new ColorAnimationComponent();
    component.redMin = redMin
    component.redMax = redMax
    component.redSpeed = redSpeed
    component.greenMin = greenMin
    component.greenMax = greenMax
    component.greenSpeed = greenSpeed
    component.blueMin = blueMin
    component.blueMax = blueMax
    component.blueSpeed = blueSpeed
    component.alphaMin = alphaMin
    component.alphaMax = alphaMax
    component.alphaSpeed = alphaSpeed
    component.redAnimate = redAnimate
    component.greenAnimate = greenAnimate
    component.blueAnimate = blueAnimate
    component.alphaAnimate = alphaAnimate
    component.repeat = repeat
    this.replaceComponent(CoreComponentIds.ColorAnimation, component);
    if (previousComponent != null) {
      Entity._colorAnimationComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeColorAnimation = function() {
    let component = this.colorAnimation;
    this.removeComponent(CoreComponentIds.ColorAnimation);
    Entity._colorAnimationComponentPool.add(component);
    return this;
  };

/** Entity: Enemy methods*/

  /** @type {components.EnemyComponent} */
  Entity.enemyComponent = new EnemyComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isEnemy', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Enemy);
    },
    set: function(value) {
      if (value !== this.isEnemy) {
        if (value) {
          this.addComponent(CoreComponentIds.Enemy, Entity.enemyComponent);
        } else {
          this.removeComponent(CoreComponentIds.Enemy);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setEnemy = function(value) {
    this.isEnemy = value;
    return this;
  };

/** Entity: Expires methods*/

  /** @type {entitas.utils.Bag} */
  Entity._expiresComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._expiresComponentPool.add(new ExpiresComponent());
    }
  })();
  Entity.clearExpiresComponentPool = function() {
    Entity._expiresComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'expires', {
    get: function() {
      return this.getComponent(CoreComponentIds.Expires);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasExpires', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Expires);
    }
  });
  /**
    * @param delay number
    * @return entitas.Entity
    */
  Entity.prototype.addExpires = function(delay:number) {
    let component = Entity._expiresComponentPool.size() > 0 ? Entity._expiresComponentPool.removeLast() : new ExpiresComponent();
    component.delay = delay
    this.addComponent(CoreComponentIds.Expires, component);
    return this;
  };
  /**
    * @param delay number
    * @return entitas.Entity
    */
  Entity.prototype.replaceExpires = function(delay:number) {
    let previousComponent = this.hasExpires ? this.expires : null;
    let component = Entity._expiresComponentPool.size() > 0 ? Entity._expiresComponentPool.removeLast() : new ExpiresComponent();
    component.delay = delay
    this.replaceComponent(CoreComponentIds.Expires, component);
    if (previousComponent != null) {
      Entity._expiresComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeExpires = function() {
    let component = this.expires;
    this.removeComponent(CoreComponentIds.Expires);
    Entity._expiresComponentPool.add(component);
    return this;
  };

/** Entity: Firing methods*/

  /** @type {components.FiringComponent} */
  Entity.firingComponent = new FiringComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isFiring', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Firing);
    },
    set: function(value) {
      if (value !== this.isFiring) {
        if (value) {
          this.addComponent(CoreComponentIds.Firing, Entity.firingComponent);
        } else {
          this.removeComponent(CoreComponentIds.Firing);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setFiring = function(value) {
    this.isFiring = value;
    return this;
  };

/** Entity: Health methods*/

  /** @type {entitas.utils.Bag} */
  Entity._healthComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._healthComponentPool.add(new HealthComponent());
    }
  })();
  Entity.clearHealthComponentPool = function() {
    Entity._healthComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'health', {
    get: function() {
      return this.getComponent(CoreComponentIds.Health);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasHealth', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Health);
    }
  });
  /**
    * @param health number
    * @param maximumHealth number
    * @return entitas.Entity
    */
  Entity.prototype.addHealth = function(health:number,maximumHealth:number) {
    let component = Entity._healthComponentPool.size() > 0 ? Entity._healthComponentPool.removeLast() : new HealthComponent();
    component.health = health
    component.maximumHealth = maximumHealth
    this.addComponent(CoreComponentIds.Health, component);
    return this;
  };
  /**
    * @param health number
    * @param maximumHealth number
    * @return entitas.Entity
    */
  Entity.prototype.replaceHealth = function(health:number,maximumHealth:number) {
    let previousComponent = this.hasHealth ? this.health : null;
    let component = Entity._healthComponentPool.size() > 0 ? Entity._healthComponentPool.removeLast() : new HealthComponent();
    component.health = health
    component.maximumHealth = maximumHealth
    this.replaceComponent(CoreComponentIds.Health, component);
    if (previousComponent != null) {
      Entity._healthComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeHealth = function() {
    let component = this.health;
    this.removeComponent(CoreComponentIds.Health);
    Entity._healthComponentPool.add(component);
    return this;
  };

/** Entity: ParallaxStar methods*/

  /** @type {components.ParallaxStarComponent} */
  Entity.parallaxStarComponent = new ParallaxStarComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isParallaxStar', {
    get: function() {
      return this.hasComponent(CoreComponentIds.ParallaxStar);
    },
    set: function(value) {
      if (value !== this.isParallaxStar) {
        if (value) {
          this.addComponent(CoreComponentIds.ParallaxStar, Entity.parallaxStarComponent);
        } else {
          this.removeComponent(CoreComponentIds.ParallaxStar);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setParallaxStar = function(value) {
    this.isParallaxStar = value;
    return this;
  };

/** Entity: Player methods*/

  /** @type {components.PlayerComponent} */
  Entity.playerComponent = new PlayerComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isPlayer', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Player);
    },
    set: function(value) {
      if (value !== this.isPlayer) {
        if (value) {
          this.addComponent(CoreComponentIds.Player, Entity.playerComponent);
        } else {
          this.removeComponent(CoreComponentIds.Player);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setPlayer = function(value) {
    this.isPlayer = value;
    return this;
  };

/** Entity: Position methods*/

  /** @type {entitas.utils.Bag} */
  Entity._positionComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._positionComponentPool.add(new PositionComponent());
    }
  })();
  Entity.clearPositionComponentPool = function() {
    Entity._positionComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'position', {
    get: function() {
      return this.getComponent(CoreComponentIds.Position);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasPosition', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Position);
    }
  });
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.addPosition = function(x:number,y:number) {
    let component = Entity._positionComponentPool.size() > 0 ? Entity._positionComponentPool.removeLast() : new PositionComponent();
    component.x = x
    component.y = y
    this.addComponent(CoreComponentIds.Position, component);
    return this;
  };
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.replacePosition = function(x:number,y:number) {
    let previousComponent = this.hasPosition ? this.position : null;
    let component = Entity._positionComponentPool.size() > 0 ? Entity._positionComponentPool.removeLast() : new PositionComponent();
    component.x = x
    component.y = y
    this.replaceComponent(CoreComponentIds.Position, component);
    if (previousComponent != null) {
      Entity._positionComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removePosition = function() {
    let component = this.position;
    this.removeComponent(CoreComponentIds.Position);
    Entity._positionComponentPool.add(component);
    return this;
  };

/** Entity: ScaleAnimation methods*/

  /** @type {entitas.utils.Bag} */
  Entity._scaleAnimationComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._scaleAnimationComponentPool.add(new ScaleAnimationComponent());
    }
  })();
  Entity.clearScaleAnimationComponentPool = function() {
    Entity._scaleAnimationComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'scaleAnimation', {
    get: function() {
      return this.getComponent(CoreComponentIds.ScaleAnimation);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasScaleAnimation', {
    get: function() {
      return this.hasComponent(CoreComponentIds.ScaleAnimation);
    }
  });
  /**
    * @param min number
    * @param max number
    * @param speed number
    * @param repeat boolean
    * @param active boolean
    * @return entitas.Entity
    */
  Entity.prototype.addScaleAnimation = function(min:number,max:number,speed:number,repeat:boolean,active:boolean) {
    let component = Entity._scaleAnimationComponentPool.size() > 0 ? Entity._scaleAnimationComponentPool.removeLast() : new ScaleAnimationComponent();
    component.min = min
    component.max = max
    component.speed = speed
    component.repeat = repeat
    component.active = active
    this.addComponent(CoreComponentIds.ScaleAnimation, component);
    return this;
  };
  /**
    * @param min number
    * @param max number
    * @param speed number
    * @param repeat boolean
    * @param active boolean
    * @return entitas.Entity
    */
  Entity.prototype.replaceScaleAnimation = function(min:number,max:number,speed:number,repeat:boolean,active:boolean) {
    let previousComponent = this.hasScaleAnimation ? this.scaleAnimation : null;
    let component = Entity._scaleAnimationComponentPool.size() > 0 ? Entity._scaleAnimationComponentPool.removeLast() : new ScaleAnimationComponent();
    component.min = min
    component.max = max
    component.speed = speed
    component.repeat = repeat
    component.active = active
    this.replaceComponent(CoreComponentIds.ScaleAnimation, component);
    if (previousComponent != null) {
      Entity._scaleAnimationComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeScaleAnimation = function() {
    let component = this.scaleAnimation;
    this.removeComponent(CoreComponentIds.ScaleAnimation);
    Entity._scaleAnimationComponentPool.add(component);
    return this;
  };

/** Entity: SoundEffect methods*/

  /** @type {entitas.utils.Bag} */
  Entity._soundEffectComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._soundEffectComponentPool.add(new SoundEffectComponent());
    }
  })();
  Entity.clearSoundEffectComponentPool = function() {
    Entity._soundEffectComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'soundEffect', {
    get: function() {
      return this.getComponent(CoreComponentIds.SoundEffect);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasSoundEffect', {
    get: function() {
      return this.hasComponent(CoreComponentIds.SoundEffect);
    }
  });
  /**
    * @param effect number
    * @return entitas.Entity
    */
  Entity.prototype.addSoundEffect = function(effect:number) {
    let component = Entity._soundEffectComponentPool.size() > 0 ? Entity._soundEffectComponentPool.removeLast() : new SoundEffectComponent();
    component.effect = effect
    this.addComponent(CoreComponentIds.SoundEffect, component);
    return this;
  };
  /**
    * @param effect number
    * @return entitas.Entity
    */
  Entity.prototype.replaceSoundEffect = function(effect:number) {
    let previousComponent = this.hasSoundEffect ? this.soundEffect : null;
    let component = Entity._soundEffectComponentPool.size() > 0 ? Entity._soundEffectComponentPool.removeLast() : new SoundEffectComponent();
    component.effect = effect
    this.replaceComponent(CoreComponentIds.SoundEffect, component);
    if (previousComponent != null) {
      Entity._soundEffectComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeSoundEffect = function() {
    let component = this.soundEffect;
    this.removeComponent(CoreComponentIds.SoundEffect);
    Entity._soundEffectComponentPool.add(component);
    return this;
  };

/** Entity: Sprite methods*/

  /** @type {entitas.utils.Bag} */
  Entity._spriteComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._spriteComponentPool.add(new SpriteComponent());
    }
  })();
  Entity.clearSpriteComponentPool = function() {
    Entity._spriteComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'sprite', {
    get: function() {
      return this.getComponent(CoreComponentIds.Sprite);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasSprite', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Sprite);
    }
  });
  /**
    * @param layer number
    * @param object Object
    * @return entitas.Entity
    */
  Entity.prototype.addSprite = function(layer:number,object:Object) {
    let component = Entity._spriteComponentPool.size() > 0 ? Entity._spriteComponentPool.removeLast() : new SpriteComponent();
    component.layer = layer
    component.object = object
    this.addComponent(CoreComponentIds.Sprite, component);
    return this;
  };
  /**
    * @param layer number
    * @param object Object
    * @return entitas.Entity
    */
  Entity.prototype.replaceSprite = function(layer:number,object:Object) {
    let previousComponent = this.hasSprite ? this.sprite : null;
    let component = Entity._spriteComponentPool.size() > 0 ? Entity._spriteComponentPool.removeLast() : new SpriteComponent();
    component.layer = layer
    component.object = object
    this.replaceComponent(CoreComponentIds.Sprite, component);
    if (previousComponent != null) {
      Entity._spriteComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeSprite = function() {
    let component = this.sprite;
    this.removeComponent(CoreComponentIds.Sprite);
    Entity._spriteComponentPool.add(component);
    return this;
  };

/** Entity: Velocity methods*/

  /** @type {entitas.utils.Bag} */
  Entity._velocityComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._velocityComponentPool.add(new VelocityComponent());
    }
  })();
  Entity.clearVelocityComponentPool = function() {
    Entity._velocityComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'velocity', {
    get: function() {
      return this.getComponent(CoreComponentIds.Velocity);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasVelocity', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Velocity);
    }
  });
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.addVelocity = function(x:number,y:number) {
    let component = Entity._velocityComponentPool.size() > 0 ? Entity._velocityComponentPool.removeLast() : new VelocityComponent();
    component.x = x
    component.y = y
    this.addComponent(CoreComponentIds.Velocity, component);
    return this;
  };
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.replaceVelocity = function(x:number,y:number) {
    let previousComponent = this.hasVelocity ? this.velocity : null;
    let component = Entity._velocityComponentPool.size() > 0 ? Entity._velocityComponentPool.removeLast() : new VelocityComponent();
    component.x = x
    component.y = y
    this.replaceComponent(CoreComponentIds.Velocity, component);
    if (previousComponent != null) {
      Entity._velocityComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeVelocity = function() {
    let component = this.velocity;
    this.removeComponent(CoreComponentIds.Velocity);
    Entity._velocityComponentPool.add(component);
    return this;
  };

/** Entity: Score methods*/

  /** @type {entitas.utils.Bag} */
  Entity._scoreComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._scoreComponentPool.add(new ScoreComponent());
    }
  })();
  Entity.clearScoreComponentPool = function() {
    Entity._scoreComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'score', {
    get: function() {
      return this.getComponent(CoreComponentIds.Score);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasScore', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Score);
    }
  });
  /**
    * @param value number
    * @return entitas.Entity
    */
  Entity.prototype.addScore = function(value:number) {
    let component = Entity._scoreComponentPool.size() > 0 ? Entity._scoreComponentPool.removeLast() : new ScoreComponent();
    component.value = value
    this.addComponent(CoreComponentIds.Score, component);
    return this;
  };
  /**
    * @param value number
    * @return entitas.Entity
    */
  Entity.prototype.replaceScore = function(value:number) {
    let previousComponent = this.hasScore ? this.score : null;
    let component = Entity._scoreComponentPool.size() > 0 ? Entity._scoreComponentPool.removeLast() : new ScoreComponent();
    component.value = value
    this.replaceComponent(CoreComponentIds.Score, component);
    if (previousComponent != null) {
      Entity._scoreComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeScore = function() {
    let component = this.score;
    this.removeComponent(CoreComponentIds.Score);
    Entity._scoreComponentPool.add(component);
    return this;
  };

/** Entity: Destroy methods*/

  /** @type {components.DestroyComponent} */
  Entity.destroyComponent = new DestroyComponent();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'isDestroy', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Destroy);
    },
    set: function(value) {
      if (value !== this.isDestroy) {
        if (value) {
          this.addComponent(CoreComponentIds.Destroy, Entity.destroyComponent);
        } else {
          this.removeComponent(CoreComponentIds.Destroy);
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.setDestroy = function(value) {
    this.isDestroy = value;
    return this;
  };

/** Entity: Mouse methods*/

  /** @type {entitas.utils.Bag} */
  Entity._mouseComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._mouseComponentPool.add(new MouseComponent());
    }
  })();
  Entity.clearMouseComponentPool = function() {
    Entity._mouseComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'mouse', {
    get: function() {
      return this.getComponent(CoreComponentIds.Mouse);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasMouse', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Mouse);
    }
  });
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.addMouse = function(x:number,y:number) {
    let component = Entity._mouseComponentPool.size() > 0 ? Entity._mouseComponentPool.removeLast() : new MouseComponent();
    component.x = x
    component.y = y
    this.addComponent(CoreComponentIds.Mouse, component);
    return this;
  };
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.replaceMouse = function(x:number,y:number) {
    let previousComponent = this.hasMouse ? this.mouse : null;
    let component = Entity._mouseComponentPool.size() > 0 ? Entity._mouseComponentPool.removeLast() : new MouseComponent();
    component.x = x
    component.y = y
    this.replaceComponent(CoreComponentIds.Mouse, component);
    if (previousComponent != null) {
      Entity._mouseComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeMouse = function() {
    let component = this.mouse;
    this.removeComponent(CoreComponentIds.Mouse);
    Entity._mouseComponentPool.add(component);
    return this;
  };

/** Entity: Scale methods*/

  /** @type {entitas.utils.Bag} */
  Entity._scaleComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._scaleComponentPool.add(new ScaleComponent());
    }
  })();
  Entity.clearScaleComponentPool = function() {
    Entity._scaleComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'scale', {
    get: function() {
      return this.getComponent(CoreComponentIds.Scale);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasScale', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Scale);
    }
  });
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.addScale = function(x:number,y:number) {
    let component = Entity._scaleComponentPool.size() > 0 ? Entity._scaleComponentPool.removeLast() : new ScaleComponent();
    component.x = x
    component.y = y
    this.addComponent(CoreComponentIds.Scale, component);
    return this;
  };
  /**
    * @param x number
    * @param y number
    * @return entitas.Entity
    */
  Entity.prototype.replaceScale = function(x:number,y:number) {
    let previousComponent = this.hasScale ? this.scale : null;
    let component = Entity._scaleComponentPool.size() > 0 ? Entity._scaleComponentPool.removeLast() : new ScaleComponent();
    component.x = x
    component.y = y
    this.replaceComponent(CoreComponentIds.Scale, component);
    if (previousComponent != null) {
      Entity._scaleComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeScale = function() {
    let component = this.scale;
    this.removeComponent(CoreComponentIds.Scale);
    Entity._scaleComponentPool.add(component);
    return this;
  };

/** Entity: Resource methods*/

  /** @type {entitas.utils.Bag} */
  Entity._resourceComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._resourceComponentPool.add(new ResourceComponent());
    }
  })();
  Entity.clearResourceComponentPool = function() {
    Entity._resourceComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'resource', {
    get: function() {
      return this.getComponent(CoreComponentIds.Resource);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasResource', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Resource);
    }
  });
  /**
    * @param name string
    * @return entitas.Entity
    */
  Entity.prototype.addResource = function(name:string) {
    let component = Entity._resourceComponentPool.size() > 0 ? Entity._resourceComponentPool.removeLast() : new ResourceComponent();
    component.name = name
    this.addComponent(CoreComponentIds.Resource, component);
    return this;
  };
  /**
    * @param name string
    * @return entitas.Entity
    */
  Entity.prototype.replaceResource = function(name:string) {
    let previousComponent = this.hasResource ? this.resource : null;
    let component = Entity._resourceComponentPool.size() > 0 ? Entity._resourceComponentPool.removeLast() : new ResourceComponent();
    component.name = name
    this.replaceComponent(CoreComponentIds.Resource, component);
    if (previousComponent != null) {
      Entity._resourceComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeResource = function() {
    let component = this.resource;
    this.removeComponent(CoreComponentIds.Resource);
    Entity._resourceComponentPool.add(component);
    return this;
  };

/** Entity: Layer methods*/

  /** @type {entitas.utils.Bag} */
  Entity._layerComponentPool = new Bag();
  (function() {
    for (let i=0; i<128; i++) {
      Entity._layerComponentPool.add(new LayerComponent());
    }
  })();
  Entity.clearLayerComponentPool = function() {
    Entity._layerComponentPool.clear();
  };
  /** @type [object Object]Component} */
  Object.defineProperty(Entity.prototype, 'layer', {
    get: function() {
      return this.getComponent(CoreComponentIds.Layer);
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'hasLayer', {
    get: function() {
      return this.hasComponent(CoreComponentIds.Layer);
    }
  });
  /**
    * @param ordinal number
    * @return entitas.Entity
    */
  Entity.prototype.addLayer = function(ordinal:number) {
    let component = Entity._layerComponentPool.size() > 0 ? Entity._layerComponentPool.removeLast() : new LayerComponent();
    component.ordinal = ordinal
    this.addComponent(CoreComponentIds.Layer, component);
    return this;
  };
  /**
    * @param ordinal number
    * @return entitas.Entity
    */
  Entity.prototype.replaceLayer = function(ordinal:number) {
    let previousComponent = this.hasLayer ? this.layer : null;
    let component = Entity._layerComponentPool.size() > 0 ? Entity._layerComponentPool.removeLast() : new LayerComponent();
    component.ordinal = ordinal
    this.replaceComponent(CoreComponentIds.Layer, component);
    if (previousComponent != null) {
      Entity._layerComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.removeLayer = function() {
    let component = this.layer;
    this.removeComponent(CoreComponentIds.Layer);
    Entity._layerComponentPool.add(component);
    return this;
  };




/** Matcher: Bounds methods*/
/** @type {entitas.Matcher} */
Matcher._matcherBounds=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Bounds', {
  get: function() {
    if (Matcher._matcherBounds == null) {
      Matcher._matcherBounds = Matcher.allOf(CoreComponentIds.Bounds);
    }
    
    return Matcher._matcherBounds;
  }
});

/** Matcher: Bullet methods*/
/** @type {entitas.Matcher} */
Matcher._matcherBullet=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Bullet', {
  get: function() {
    if (Matcher._matcherBullet == null) {
      Matcher._matcherBullet = Matcher.allOf(CoreComponentIds.Bullet);
    }
    
    return Matcher._matcherBullet;
  }
});

/** Matcher: ColorAnimation methods*/
/** @type {entitas.Matcher} */
Matcher._matcherColorAnimation=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'ColorAnimation', {
  get: function() {
    if (Matcher._matcherColorAnimation == null) {
      Matcher._matcherColorAnimation = Matcher.allOf(CoreComponentIds.ColorAnimation);
    }
    
    return Matcher._matcherColorAnimation;
  }
});

/** Matcher: Enemy methods*/
/** @type {entitas.Matcher} */
Matcher._matcherEnemy=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Enemy', {
  get: function() {
    if (Matcher._matcherEnemy == null) {
      Matcher._matcherEnemy = Matcher.allOf(CoreComponentIds.Enemy);
    }
    
    return Matcher._matcherEnemy;
  }
});

/** Matcher: Expires methods*/
/** @type {entitas.Matcher} */
Matcher._matcherExpires=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Expires', {
  get: function() {
    if (Matcher._matcherExpires == null) {
      Matcher._matcherExpires = Matcher.allOf(CoreComponentIds.Expires);
    }
    
    return Matcher._matcherExpires;
  }
});

/** Matcher: Firing methods*/
/** @type {entitas.Matcher} */
Matcher._matcherFiring=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Firing', {
  get: function() {
    if (Matcher._matcherFiring == null) {
      Matcher._matcherFiring = Matcher.allOf(CoreComponentIds.Firing);
    }
    
    return Matcher._matcherFiring;
  }
});

/** Matcher: Health methods*/
/** @type {entitas.Matcher} */
Matcher._matcherHealth=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Health', {
  get: function() {
    if (Matcher._matcherHealth == null) {
      Matcher._matcherHealth = Matcher.allOf(CoreComponentIds.Health);
    }
    
    return Matcher._matcherHealth;
  }
});

/** Matcher: ParallaxStar methods*/
/** @type {entitas.Matcher} */
Matcher._matcherParallaxStar=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'ParallaxStar', {
  get: function() {
    if (Matcher._matcherParallaxStar == null) {
      Matcher._matcherParallaxStar = Matcher.allOf(CoreComponentIds.ParallaxStar);
    }
    
    return Matcher._matcherParallaxStar;
  }
});

/** Matcher: Player methods*/
/** @type {entitas.Matcher} */
Matcher._matcherPlayer=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Player', {
  get: function() {
    if (Matcher._matcherPlayer == null) {
      Matcher._matcherPlayer = Matcher.allOf(CoreComponentIds.Player);
    }
    
    return Matcher._matcherPlayer;
  }
});

/** Matcher: Position methods*/
/** @type {entitas.Matcher} */
Matcher._matcherPosition=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Position', {
  get: function() {
    if (Matcher._matcherPosition == null) {
      Matcher._matcherPosition = Matcher.allOf(CoreComponentIds.Position);
    }
    
    return Matcher._matcherPosition;
  }
});

/** Matcher: ScaleAnimation methods*/
/** @type {entitas.Matcher} */
Matcher._matcherScaleAnimation=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'ScaleAnimation', {
  get: function() {
    if (Matcher._matcherScaleAnimation == null) {
      Matcher._matcherScaleAnimation = Matcher.allOf(CoreComponentIds.ScaleAnimation);
    }
    
    return Matcher._matcherScaleAnimation;
  }
});

/** Matcher: SoundEffect methods*/
/** @type {entitas.Matcher} */
Matcher._matcherSoundEffect=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'SoundEffect', {
  get: function() {
    if (Matcher._matcherSoundEffect == null) {
      Matcher._matcherSoundEffect = Matcher.allOf(CoreComponentIds.SoundEffect);
    }
    
    return Matcher._matcherSoundEffect;
  }
});

/** Matcher: Sprite methods*/
/** @type {entitas.Matcher} */
Matcher._matcherSprite=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Sprite', {
  get: function() {
    if (Matcher._matcherSprite == null) {
      Matcher._matcherSprite = Matcher.allOf(CoreComponentIds.Sprite);
    }
    
    return Matcher._matcherSprite;
  }
});

/** Matcher: Velocity methods*/
/** @type {entitas.Matcher} */
Matcher._matcherVelocity=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Velocity', {
  get: function() {
    if (Matcher._matcherVelocity == null) {
      Matcher._matcherVelocity = Matcher.allOf(CoreComponentIds.Velocity);
    }
    
    return Matcher._matcherVelocity;
  }
});

/** Matcher: Score methods*/
/** @type {entitas.Matcher} */
Matcher._matcherScore=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Score', {
  get: function() {
    if (Matcher._matcherScore == null) {
      Matcher._matcherScore = Matcher.allOf(CoreComponentIds.Score);
    }
    
    return Matcher._matcherScore;
  }
});

/** Matcher: Destroy methods*/
/** @type {entitas.Matcher} */
Matcher._matcherDestroy=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Destroy', {
  get: function() {
    if (Matcher._matcherDestroy == null) {
      Matcher._matcherDestroy = Matcher.allOf(CoreComponentIds.Destroy);
    }
    
    return Matcher._matcherDestroy;
  }
});

/** Matcher: Mouse methods*/
/** @type {entitas.Matcher} */
Matcher._matcherMouse=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Mouse', {
  get: function() {
    if (Matcher._matcherMouse == null) {
      Matcher._matcherMouse = Matcher.allOf(CoreComponentIds.Mouse);
    }
    
    return Matcher._matcherMouse;
  }
});

/** Matcher: Scale methods*/
/** @type {entitas.Matcher} */
Matcher._matcherScale=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Scale', {
  get: function() {
    if (Matcher._matcherScale == null) {
      Matcher._matcherScale = Matcher.allOf(CoreComponentIds.Scale);
    }
    
    return Matcher._matcherScale;
  }
});

/** Matcher: Resource methods*/
/** @type {entitas.Matcher} */
Matcher._matcherResource=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Resource', {
  get: function() {
    if (Matcher._matcherResource == null) {
      Matcher._matcherResource = Matcher.allOf(CoreComponentIds.Resource);
    }
    
    return Matcher._matcherResource;
  }
});

/** Matcher: Layer methods*/
/** @type {entitas.Matcher} */
Matcher._matcherLayer=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, 'Layer', {
  get: function() {
    if (Matcher._matcherLayer == null) {
      Matcher._matcherLayer = Matcher.allOf(CoreComponentIds.Layer);
    }
    
    return Matcher._matcherLayer;
  }
});



/** Pool: Score methods*/


  /** @type {entitas.Pool} */
  Object.defineProperty(Pool.prototype, 'scoreEntity', {
    get: function() {
      return this.getGroup(Matcher.Score).getSingleEntity();
    }
  });
  /** @type {components.ScoreComponent} */
  Object.defineProperty(Pool.prototype, 'score', {
    get: function() {
      return this.scoreEntity.score;
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'hasScore', {
    get: function() {
      return this.scoreEntity != undefined;
    }
  });
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.setScore = function(value) {
    if (this.hasScore) {
      throw new SingleEntityException(Matcher.Score);
    }
    let entity = this.createEntity('Score');
    entity.addScore(value);
    return entity;
  };
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.replaceScore = function(value) {
    let entity = this.scoreEntity;
    if (entity == null) {
      entity = this.setScore(value);
    } else {
      entity.replaceScore(value);
    }
    return entity;
  };
  /**
   * @returns {entitas.Entity}
   */
  Pool.prototype.removeScore = function() {
    this.destroyEntity(this.scoreEntity);
  };

/** Pool: Mouse methods*/


  /** @type {entitas.Pool} */
  Object.defineProperty(Pool.prototype, 'mouseEntity', {
    get: function() {
      return this.getGroup(Matcher.Mouse).getSingleEntity();
    }
  });
  /** @type {components.MouseComponent} */
  Object.defineProperty(Pool.prototype, 'mouse', {
    get: function() {
      return this.mouseEntity.mouse;
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'hasMouse', {
    get: function() {
      return this.mouseEntity != undefined;
    }
  });
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.setMouse = function(value) {
    if (this.hasMouse) {
      throw new SingleEntityException(Matcher.Mouse);
    }
    let entity = this.createEntity('Mouse');
    entity.addMouse(value);
    return entity;
  };
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.replaceMouse = function(value) {
    let entity = this.mouseEntity;
    if (entity == null) {
      entity = this.setMouse(value);
    } else {
      entity.replaceMouse(value);
    }
    return entity;
  };
  /**
   * @returns {entitas.Entity}
   */
  Pool.prototype.removeMouse = function() {
    this.destroyEntity(this.mouseEntity);
  };

/** Pool: Firing methods*/


  /** @type {entitas.Pool} */
  Object.defineProperty(Pool.prototype, 'firingEntity', {
    get: function() {
      return this.getGroup(Matcher.Firing).getSingleEntity();
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'isFiring', {
    get: function() {
      return this.firingEntity != null;
    },
    set: function(value) {
      let entity = this.firingEntity;
      if (value != (entity != null)) {
        if (value) {
          this.createEntity('Firing').isFiring = true;
        } else {
          this.destroyEntity(entity);
        }
      }
    }
  });

