/**
 * Entitas Generated Components and Extensions for {{ namespace }}
 *
 * do not edit this file
 */
import {Pool} from 'entitas'
import {Entity} from 'entitas'
import {Matcher} from 'entitas'
import {ISystem} from 'entitas'
import {IMatcher} from 'entitas'
import {IComponent} from 'entitas'
import {SingleEntityException} from 'entitas.exceptions'
import {Bag} from 'entitas.utils'


export enum CoreComponentIds {
{% for component in components %}        {{ component.key }},
{% endfor %}        TotalComponents
}

Entity.initialize(CoreComponentIds.TotalComponents, {"entities":{{ alloc.entities }},"components":{{ alloc.components }}})


{% for component in components %}
export class {{ component.key }}Component implements IComponent {
{% for field in component.value %}        public {{ field | property }}: {{ field | fieldType }};  
{% endfor %}
}{% endfor %}

export class Pools {

    static _allPools:Array<Pool>

    static get allPools():Array<Pool> {
        if (Pools._allPools == null) {
            Pools._allPools = [Pools.pool]
        }
        return Pools._allPools
    }

    static _pool:Pool

    static get pool():Pool {
        if (Pools._pool == null) {
            Pools._pool = new Pool(CoreComponentIds, CoreComponentIds.TotalComponents, false)
        }

        return Pools._pool
    }
}


/**
* Entity extensions
*/

{% for component in components %}
/** Entity: {{ component.key }} methods*/
{% if component.value == false %}
  /** @type {components.{{ component.key }}Component} */
  Entity.{{ component.key | camel }}Component = new {{ component.key }}Component();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'is{{ component.key }}', {
    get: function() {
      return this.hasComponent(CoreComponentIds.{{ component.key }});
    },
    set: function(value) {
      if (value !== this.is{{ component.key }}) {
        if (value) {
          this.addComponent(CoreComponentIds.{{ component.key }}, Entity.{{ component.key | camel }}Component);
        } else {
          this.removeComponent(CoreComponentIds.{{ component.key }});
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.set{{ component.key }} = function(value) {
    this.is{{ component.key }} = value;
    return this;
  };
{% else %}
  /** @type {entitas.utils.Bag} */
  Entity._{{ component.key | camel }}ComponentPool = new Bag();
  (function() {
    for (let i=0; i<{{ alloc.components }}; i++) {
      Entity._{{ component.key | camel }}ComponentPool.add(new {{ component.key }}Component());
    }
  })();
  Entity.clear{{ component.key }}ComponentPool = function() {
    Entity._{{ component.key | camel }}ComponentPool.clear();
  };
  /** @type {{components.{{ component.key }}Component} */
  Object.defineProperty(Entity.prototype, '{{ component.key | camel }}', {
    get: function() {
      return this.getComponent(CoreComponentIds.{{ component.key }});
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'has{{ component.key }}', {
    get: function() {
      return this.hasComponent(CoreComponentIds.{{ component.key }});
    }
  });
  /**{% for field in component.value %}
    * @param {{ field | property }} {{ field | fieldType }}{% endfor %}
    * @return entitas.Entity
    */
  Entity.prototype.add{{ component.key }} = function({{ component.value }}) {
    let component = Entity._{{ component.key | camel }}ComponentPool.size() > 0 ? Entity._{{ component.key | camel }}ComponentPool.removeLast() : new {{ component.key }}Component();
    {% for field in component.value %}component.{{ field | property }} = {{ field | property | camel }}
    {% endfor %}this.addComponent(CoreComponentIds.{{ component.key }}, component);
    return this;
  };
  /**{% for field in component.value %}
    * @param {{ field | property }} {{ field | fieldType }}{% endfor %}
    * @return entitas.Entity
    */
  Entity.prototype.replace{{ component.key }} = function({{ component.value }}) {
    let previousComponent = this.has{{ component.key }} ? this.{{ component.key | camel }} : null;
    let component = Entity._{{ component.key | camel }}ComponentPool.size() > 0 ? Entity._{{ component.key | camel }}ComponentPool.removeLast() : new {{ component.key }}Component();
    {% for field in component.value %}component.{{ field | property }} = {{ field | property | camel }}
    {% endfor %}this.replaceComponent(CoreComponentIds.{{ component.key }}, component);
    if (previousComponent != null) {
      Entity._{{ component.key | camel }}ComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * @returns {entitas.Entity}
   */
  Entity.prototype.remove{{ component.key }} = function() {
    let component = this.{{ component.key | camel }};
    this.removeComponent(CoreComponentIds.{{ component.key }});
    Entity._{{ component.key | camel }}ComponentPool.add(component);
    return this;
  };
{% endif %}{% endfor %}


{% for component in components %}
/** Matcher: {{ component.key }} methods*/
/** @type {entitas.Matcher} */
Matcher._matcher{{ component.key }}=null;

/** @type {entitas.Matcher} */
Object.defineProperty(Matcher, '{{ component.key }}', {
  get: function() {
    if (Matcher._matcher{{ component.key }} == null) {
      Matcher._matcher{{ component.key }} = Matcher.allOf(CoreComponentIds.{{ component.key }});
    }
    
    return Matcher._matcher{{ component.key }};
  }
});
{% endfor %}

{% for entity in entities %}
/** Pool: {{ entity.key }} methods*/
{% assign component = components[entity.key] %}
{% if component.value == false %}
  /** @type {entitas.Pool} */
  Object.defineProperty(Pool.prototype, '{{ entity.key | camel }}Entity', {
    get: function() {
      return this.getGroup(Matcher.{{ entity.key }}).getSingleEntity();
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'is{{ entity.key }}', {
    get: function() {
      return this.{{ entity.key | camel }}Entity != null;
    },
    set: function(value) {
      let entity = this.{{ entity.key | camel }}Entity;
      if (value != (entity != null)) {
        if (value) {
          this.createEntity('{{ entity.key }}').is{{ entity.key }} = true;
        } else {
          this.destroyEntity(entity);
        }
      }
    }
  });
{% else %}
  /** @type {entitas.Pool} */
  Object.defineProperty(Pool.prototype, '{{ entity.key | camel }}Entity', {
    get: function() {
      return this.getGroup(Matcher.{{ entity.key }}).getSingleEntity();
    }
  });
  /** @type {components.{{ entity.key }}Component} */
  Object.defineProperty(Pool.prototype, '{{ entity.key | camel }}', {
    get: function() {
      return this.{{ entity.key | camel }}Entity.{{ entity.key | camel }};
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'has{{ entity.key }}', {
    get: function() {
      return this.{{ entity.key | camel }}Entity != undefined;
    }
  });
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.set{{ entity.key }} = function(value) {
    if (this.has{{ entity.key }}) {
      throw new SingleEntityException(Matcher.{{ entity.key }});
    }
    let entity = this.createEntity('{{ entity.key }}');
    entity.add{{ entity.key }}(value);
    return entity;
  };
  /**
   * @param {number} value
   * @returns {entitas.Entity}
   */
  Pool.prototype.replace{{ entity.key }} = function(value) {
    let entity = this.{{ entity.key | camel }}Entity;
    if (entity == null) {
      entity = this.set{{ entity.key }}(value);
    } else {
      entity.replace{{ entity.key }}(value);
    }
    return entity;
  };
  /**
   * @returns {entitas.Entity}
   */
  Pool.prototype.remove{{ entity.key }} = function() {
    this.destroyEntity(this.{{ entity.key | camel }}Entity);
  };
{% endif %}{% endfor %}
